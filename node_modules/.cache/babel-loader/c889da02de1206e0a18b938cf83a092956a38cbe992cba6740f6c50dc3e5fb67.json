{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { composeRefs } from '../../utils/compose-refs.js';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { ark } from '../factory.js';\nimport { useFieldset } from './use-fieldset.js';\nimport { FieldsetProvider } from './use-fieldset-context.js';\nconst FieldsetRoot = forwardRef((props, ref) => {\n  const [useFieldsetProps, localProps] = createSplitProps()(props, [\"id\", \"disabled\", \"invalid\"]);\n  const fieldset = useFieldset(useFieldsetProps);\n  const mergedProps = mergeProps(fieldset.getRootProps(), localProps);\n  return /* @__PURE__ */jsx(FieldsetProvider, {\n    value: fieldset,\n    children: /* @__PURE__ */jsx(ark.fieldset, {\n      ...mergedProps,\n      ref: composeRefs(ref, fieldset.refs.rootRef)\n    })\n  });\n});\nFieldsetRoot.displayName = \"FieldsetRoot\";\nexport { FieldsetRoot };","map":{"version":3,"names":["jsx","mergeProps","forwardRef","composeRefs","createSplitProps","ark","useFieldset","FieldsetProvider","FieldsetRoot","props","ref","useFieldsetProps","localProps","fieldset","mergedProps","getRootProps","value","children","refs","rootRef","displayName"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@ark-ui/react/dist/components/fieldset/fieldset-root.js"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { composeRefs } from '../../utils/compose-refs.js';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { ark } from '../factory.js';\nimport { useFieldset } from './use-fieldset.js';\nimport { FieldsetProvider } from './use-fieldset-context.js';\n\nconst FieldsetRoot = forwardRef((props, ref) => {\n  const [useFieldsetProps, localProps] = createSplitProps()(props, [\n    \"id\",\n    \"disabled\",\n    \"invalid\"\n  ]);\n  const fieldset = useFieldset(useFieldsetProps);\n  const mergedProps = mergeProps(fieldset.getRootProps(), localProps);\n  return /* @__PURE__ */ jsx(FieldsetProvider, { value: fieldset, children: /* @__PURE__ */ jsx(ark.fieldset, { ...mergedProps, ref: composeRefs(ref, fieldset.refs.rootRef) }) });\n});\nFieldsetRoot.displayName = \"FieldsetRoot\";\n\nexport { FieldsetRoot };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,QAAQ,mBAAmB;AACvC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,gBAAgB,QAAQ,2BAA2B;AAE5D,MAAMC,YAAY,GAAGN,UAAU,CAAC,CAACO,KAAK,EAAEC,GAAG,KAAK;EAC9C,MAAM,CAACC,gBAAgB,EAAEC,UAAU,CAAC,GAAGR,gBAAgB,CAAC,CAAC,CAACK,KAAK,EAAE,CAC/D,IAAI,EACJ,UAAU,EACV,SAAS,CACV,CAAC;EACF,MAAMI,QAAQ,GAAGP,WAAW,CAACK,gBAAgB,CAAC;EAC9C,MAAMG,WAAW,GAAGb,UAAU,CAACY,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAEH,UAAU,CAAC;EACnE,OAAO,eAAgBZ,GAAG,CAACO,gBAAgB,EAAE;IAAES,KAAK,EAAEH,QAAQ;IAAEI,QAAQ,EAAE,eAAgBjB,GAAG,CAACK,GAAG,CAACQ,QAAQ,EAAE;MAAE,GAAGC,WAAW;MAAEJ,GAAG,EAAEP,WAAW,CAACO,GAAG,EAAEG,QAAQ,CAACK,IAAI,CAACC,OAAO;IAAE,CAAC;EAAE,CAAC,CAAC;AAClL,CAAC,CAAC;AACFX,YAAY,CAACY,WAAW,GAAG,cAAc;AAEzC,SAASZ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}