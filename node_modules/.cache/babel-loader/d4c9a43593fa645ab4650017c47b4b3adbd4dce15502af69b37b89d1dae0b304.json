{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, queryAll, dataAttr, visuallyHiddenStyle, ariaAttr, getBeforeInputValue, getNativeEvent, isComposingEvent, isModifierKey, getEventKey, raf, dispatchInputValueEvent } from '@zag-js/dom-query';\nimport { invariant, compact, isEqual } from '@zag-js/utils';\nimport { createMachine, choose } from '@zag-js/core';\n\n// src/pin-input.anatomy.ts\nvar anatomy = createAnatomy(\"pinInput\").parts(\"root\", \"label\", \"input\", \"control\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `pin-input:${ctx.id}`,\n  getInputId: (ctx, id) => ctx.ids?.input?.(id) ?? `pin-input:${ctx.id}:${id}`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `pin-input:${ctx.id}:hidden`,\n  getLabelId: ctx => ctx.ids?.label ?? `pin-input:${ctx.id}:label`,\n  getControlId: ctx => ctx.ids?.control ?? `pin-input:${ctx.id}:control`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getInputEls: ctx => {\n    const ownerId = CSS.escape(dom.getRootId(ctx));\n    const selector = `input[data-ownedby=${ownerId}]`;\n    return queryAll(dom.getRootEl(ctx), selector);\n  },\n  getInputEl: (ctx, id) => dom.getById(ctx, dom.getInputId(ctx, id)),\n  getFocusedInputEl: ctx => dom.getInputEls(ctx)[ctx.focusedIndex],\n  getFirstInputEl: ctx => dom.getInputEls(ctx)[0],\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx))\n});\n\n// src/pin-input.utils.ts\nvar REGEX = {\n  numeric: /^[0-9]+$/,\n  alphabetic: /^[A-Za-z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i\n};\nfunction isValidType(ctx, value) {\n  if (!ctx.type) return true;\n  return !!REGEX[ctx.type]?.test(value);\n}\nfunction isValidValue(ctx, value) {\n  if (!ctx.pattern) return isValidType(ctx, value);\n  const regex = new RegExp(ctx.pattern, \"g\");\n  return regex.test(value);\n}\n\n// src/pin-input.connect.ts\nfunction connect(state, send, normalize) {\n  const complete = state.context.isValueComplete;\n  const invalid = state.context.invalid;\n  const focusedIndex = state.context.focusedIndex;\n  const translations = state.context.translations;\n  function focus() {\n    dom.getFirstInputEl(state.context)?.focus();\n  }\n  return {\n    focus,\n    value: state.context.value,\n    valueAsString: state.context.valueAsString,\n    complete,\n    setValue(value) {\n      if (!Array.isArray(value)) {\n        invariant(\"[pin-input/setValue] value must be an array\");\n      }\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    clearValue() {\n      send({\n        type: \"VALUE.CLEAR\"\n      });\n    },\n    setValueAtIndex(index, value) {\n      send({\n        type: \"VALUE.SET\",\n        value,\n        index\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        dir: state.context.dir,\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(state.context.disabled),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(state.context.readOnly)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        htmlFor: dom.getHiddenInputId(state.context),\n        id: dom.getLabelId(state.context),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(state.context.disabled),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        onClick(event) {\n          event.preventDefault();\n          focus();\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        \"aria-hidden\": true,\n        type: \"text\",\n        tabIndex: -1,\n        id: dom.getHiddenInputId(state.context),\n        readOnly: state.context.readOnly,\n        disabled: state.context.disabled,\n        required: state.context.required,\n        name: state.context.name,\n        form: state.context.form,\n        style: visuallyHiddenStyle,\n        maxLength: state.context.valueLength,\n        defaultValue: state.context.valueAsString\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context)\n      });\n    },\n    getInputProps(props) {\n      const {\n        index\n      } = props;\n      const inputType = state.context.type === \"numeric\" ? \"tel\" : \"text\";\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        disabled: state.context.disabled,\n        \"data-disabled\": dataAttr(state.context.disabled),\n        \"data-complete\": dataAttr(complete),\n        id: dom.getInputId(state.context, index.toString()),\n        \"data-ownedby\": dom.getRootId(state.context),\n        \"aria-label\": translations.inputLabel(index, state.context.valueLength),\n        inputMode: state.context.otp || state.context.type === \"numeric\" ? \"numeric\" : \"text\",\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        type: state.context.mask ? \"password\" : inputType,\n        defaultValue: state.context.value[index] || \"\",\n        readOnly: state.context.readOnly,\n        autoCapitalize: \"none\",\n        autoComplete: state.context.otp ? \"one-time-code\" : \"off\",\n        placeholder: focusedIndex === index ? \"\" : state.context.placeholder,\n        onBeforeInput(event) {\n          try {\n            const value = getBeforeInputValue(event);\n            const isValid = isValidValue(state.context, value);\n            if (!isValid) {\n              send({\n                type: \"VALUE.INVALID\",\n                value\n              });\n              event.preventDefault();\n            }\n            if (value.length > 2) {\n              event.currentTarget.setSelectionRange(0, 1, \"forward\");\n            }\n          } catch {}\n        },\n        onChange(event) {\n          const evt = getNativeEvent(event);\n          const {\n            value\n          } = event.currentTarget;\n          if (evt.inputType === \"insertFromPaste\" || value.length > 2) {\n            send({\n              type: \"INPUT.PASTE\",\n              value\n            });\n            event.currentTarget.value = value[0];\n            event.preventDefault();\n            return;\n          }\n          if (evt.inputType === \"deleteContentBackward\") {\n            send(\"INPUT.BACKSPACE\");\n            return;\n          }\n          send({\n            type: \"INPUT.CHANGE\",\n            value,\n            index\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          if (isModifierKey(event)) return;\n          const keyMap = {\n            Backspace() {\n              send(\"INPUT.BACKSPACE\");\n            },\n            Delete() {\n              send(\"INPUT.DELETE\");\n            },\n            ArrowLeft() {\n              send(\"INPUT.ARROW_LEFT\");\n            },\n            ArrowRight() {\n              send(\"INPUT.ARROW_RIGHT\");\n            },\n            Enter() {\n              send(\"INPUT.ENTER\");\n            }\n          };\n          const exec = keyMap[getEventKey(event, state.context)];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        },\n        onFocus() {\n          send({\n            type: \"INPUT.FOCUS\",\n            index\n          });\n        },\n        onBlur() {\n          send({\n            type: \"INPUT.BLUR\",\n            index\n          });\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"pin-input\",\n    initial: \"idle\",\n    context: {\n      value: [],\n      placeholder: \"\\u25CB\",\n      otp: false,\n      type: \"numeric\",\n      ...ctx,\n      focusedIndex: -1,\n      translations: {\n        inputLabel: (index, length) => `pin code ${index + 1} of ${length}`,\n        ...ctx.translations\n      }\n    },\n    computed: {\n      valueLength: ctx2 => ctx2.value.length,\n      filledValueLength: ctx2 => ctx2.value.filter(v => v?.trim() !== \"\").length,\n      isValueComplete: ctx2 => ctx2.valueLength === ctx2.filledValueLength,\n      valueAsString: ctx2 => ctx2.value.join(\"\"),\n      focusedValue: ctx2 => ctx2.value[ctx2.focusedIndex] || \"\"\n    },\n    entry: choose([{\n      guard: \"autoFocus\",\n      actions: [\"setupValue\", \"setFocusIndexToFirst\"]\n    }, {\n      actions: [\"setupValue\"]\n    }]),\n    watch: {\n      focusedIndex: [\"focusInput\", \"selectInputIfNeeded\"],\n      value: [\"syncInputElements\"],\n      isValueComplete: [\"invokeOnComplete\", \"blurFocusedInputIfNeeded\"]\n    },\n    on: {\n      \"VALUE.SET\": [{\n        guard: \"hasIndex\",\n        actions: [\"setValueAtIndex\"]\n      }, {\n        actions: [\"setValue\"]\n      }],\n      \"VALUE.CLEAR\": {\n        actions: [\"clearValue\", \"setFocusIndexToFirst\"]\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          \"INPUT.FOCUS\": {\n            target: \"focused\",\n            actions: \"setFocusedIndex\"\n          }\n        }\n      },\n      focused: {\n        on: {\n          \"INPUT.CHANGE\": [{\n            guard: \"isFinalValue\",\n            actions: [\"setFocusedValue\", \"syncInputValue\"]\n          }, {\n            actions: [\"setFocusedValue\", \"setNextFocusedIndex\", \"syncInputValue\"]\n          }],\n          \"INPUT.PASTE\": {\n            actions: [\"setPastedValue\", \"setLastValueFocusIndex\"]\n          },\n          \"INPUT.BLUR\": {\n            target: \"idle\",\n            actions: \"clearFocusedIndex\"\n          },\n          \"INPUT.DELETE\": {\n            guard: \"hasValue\",\n            actions: \"clearFocusedValue\"\n          },\n          \"INPUT.ARROW_LEFT\": {\n            actions: \"setPrevFocusedIndex\"\n          },\n          \"INPUT.ARROW_RIGHT\": {\n            actions: \"setNextFocusedIndex\"\n          },\n          \"INPUT.BACKSPACE\": [{\n            guard: \"hasValue\",\n            actions: [\"clearFocusedValue\"]\n          }, {\n            actions: [\"setPrevFocusedIndex\", \"clearFocusedValue\"]\n          }],\n          \"INPUT.ENTER\": {\n            guard: \"isValueComplete\",\n            actions: \"requestFormSubmit\"\n          },\n          \"VALUE.INVALID\": {\n            actions: \"invokeOnInvalid\"\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      autoFocus: ctx2 => !!ctx2.autoFocus,\n      isValueEmpty: (_ctx, evt) => evt.value === \"\",\n      hasValue: ctx2 => ctx2.value[ctx2.focusedIndex] !== \"\",\n      isValueComplete: ctx2 => ctx2.isValueComplete,\n      isFinalValue: ctx2 => ctx2.filledValueLength + 1 === ctx2.valueLength && ctx2.value.findIndex(v => v.trim() === \"\") === ctx2.focusedIndex,\n      hasIndex: (_ctx, evt) => evt.index !== void 0,\n      isDisabled: ctx2 => !!ctx2.disabled\n    },\n    actions: {\n      setupValue(ctx2) {\n        if (ctx2.value.length) return;\n        const inputEls = dom.getInputEls(ctx2);\n        const emptyValues = Array.from({\n          length: inputEls.length\n        }).fill(\"\");\n        assignValue(ctx2, emptyValues);\n      },\n      focusInput(ctx2) {\n        if (ctx2.focusedIndex === -1) return;\n        dom.getFocusedInputEl(ctx2)?.focus({\n          preventScroll: true\n        });\n      },\n      selectInputIfNeeded(ctx2) {\n        if (!ctx2.selectOnFocus || ctx2.focusedIndex === -1) return;\n        raf(() => {\n          dom.getFocusedInputEl(ctx2)?.select();\n        });\n      },\n      invokeOnComplete(ctx2) {\n        if (!ctx2.isValueComplete) return;\n        ctx2.onValueComplete?.({\n          value: Array.from(ctx2.value),\n          valueAsString: ctx2.valueAsString\n        });\n      },\n      invokeOnInvalid(ctx2, evt) {\n        ctx2.onValueInvalid?.({\n          value: evt.value,\n          index: ctx2.focusedIndex\n        });\n      },\n      clearFocusedIndex(ctx2) {\n        ctx2.focusedIndex = -1;\n      },\n      setFocusedIndex(ctx2, evt) {\n        ctx2.focusedIndex = evt.index;\n      },\n      setValue(ctx2, evt) {\n        set.value(ctx2, evt.value);\n      },\n      setFocusedValue(ctx2, evt) {\n        const nextValue = getNextValue(ctx2.focusedValue, evt.value);\n        set.valueAtIndex(ctx2, ctx2.focusedIndex, nextValue);\n      },\n      revertInputValue(ctx2) {\n        const inputEl = dom.getFocusedInputEl(ctx2);\n        dom.setValue(inputEl, ctx2.focusedValue);\n      },\n      syncInputValue(ctx2, evt) {\n        const inputEl = dom.getInputEl(ctx2, evt.index.toString());\n        dom.setValue(inputEl, ctx2.value[evt.index]);\n      },\n      syncInputElements(ctx2) {\n        const inputEls = dom.getInputEls(ctx2);\n        inputEls.forEach((inputEl, index) => {\n          dom.setValue(inputEl, ctx2.value[index]);\n        });\n      },\n      setPastedValue(ctx2, evt) {\n        raf(() => {\n          const startIndex = Math.min(ctx2.focusedIndex, ctx2.filledValueLength);\n          const left = startIndex > 0 ? ctx2.valueAsString.substring(0, ctx2.focusedIndex) : \"\";\n          const right = evt.value.substring(0, ctx2.valueLength - startIndex);\n          const value = left + right;\n          set.value(ctx2, value.split(\"\"));\n        });\n      },\n      setValueAtIndex(ctx2, evt) {\n        const nextValue = getNextValue(ctx2.focusedValue, evt.value);\n        set.valueAtIndex(ctx2, evt.index, nextValue);\n      },\n      clearValue(ctx2) {\n        const nextValue = Array.from({\n          length: ctx2.valueLength\n        }).fill(\"\");\n        set.value(ctx2, nextValue);\n      },\n      clearFocusedValue(ctx2) {\n        set.valueAtIndex(ctx2, ctx2.focusedIndex, \"\");\n      },\n      setFocusIndexToFirst(ctx2) {\n        ctx2.focusedIndex = 0;\n      },\n      setNextFocusedIndex(ctx2) {\n        ctx2.focusedIndex = Math.min(ctx2.focusedIndex + 1, ctx2.valueLength - 1);\n      },\n      setPrevFocusedIndex(ctx2) {\n        ctx2.focusedIndex = Math.max(ctx2.focusedIndex - 1, 0);\n      },\n      setLastValueFocusIndex(ctx2) {\n        raf(() => {\n          ctx2.focusedIndex = Math.min(ctx2.filledValueLength, ctx2.valueLength - 1);\n        });\n      },\n      blurFocusedInputIfNeeded(ctx2) {\n        if (!ctx2.blurOnComplete) return;\n        raf(() => {\n          dom.getFocusedInputEl(ctx2)?.blur();\n        });\n      },\n      requestFormSubmit(ctx2) {\n        if (!ctx2.name || !ctx2.isValueComplete) return;\n        const inputEl = dom.getHiddenInputEl(ctx2);\n        inputEl?.form?.requestSubmit();\n      }\n    }\n  });\n}\nfunction assignValue(ctx, value) {\n  const arr = Array.isArray(value) ? value : value.split(\"\").filter(Boolean);\n  arr.forEach((value2, index) => {\n    ctx.value[index] = value2;\n  });\n}\nfunction getNextValue(current, next) {\n  let nextValue = next;\n  if (current[0] === next[0]) nextValue = next[1];else if (current[0] === next[1]) nextValue = next[0];\n  return nextValue.split(\"\")[nextValue.length - 1];\n}\nvar invoke = {\n  change(ctx) {\n    ctx.onValueChange?.({\n      value: Array.from(ctx.value),\n      valueAsString: ctx.valueAsString\n    });\n    const inputEl = dom.getHiddenInputEl(ctx);\n    dispatchInputValueEvent(inputEl, {\n      value: ctx.valueAsString\n    });\n  }\n};\nvar set = {\n  value(ctx, value) {\n    if (isEqual(ctx.value, value)) return;\n    assignValue(ctx, value);\n    invoke.change(ctx);\n  },\n  valueAtIndex(ctx, index, value) {\n    if (isEqual(ctx.value[index], value)) return;\n    ctx.value[index] = value;\n    invoke.change(ctx);\n  }\n};\nexport { anatomy, connect, machine };","map":{"version":3,"names":["createAnatomy","createScope","queryAll","dataAttr","visuallyHiddenStyle","ariaAttr","getBeforeInputValue","getNativeEvent","isComposingEvent","isModifierKey","getEventKey","raf","dispatchInputValueEvent","invariant","compact","isEqual","createMachine","choose","anatomy","parts","build","dom","getRootId","ctx","ids","root","id","getInputId","input","getHiddenInputId","hiddenInput","getLabelId","label","getControlId","control","getRootEl","getById","getInputEls","ownerId","CSS","escape","selector","getInputEl","getFocusedInputEl","focusedIndex","getFirstInputEl","getHiddenInputEl","REGEX","numeric","alphabetic","alphanumeric","isValidType","value","type","test","isValidValue","pattern","regex","RegExp","connect","state","send","normalize","complete","context","isValueComplete","invalid","translations","focus","valueAsString","setValue","Array","isArray","clearValue","setValueAtIndex","index","getRootProps","element","dir","attrs","disabled","readOnly","getLabelProps","htmlFor","onClick","event","preventDefault","getHiddenInputProps","tabIndex","required","name","form","style","maxLength","valueLength","defaultValue","getControlProps","getInputProps","props","inputType","toString","inputLabel","inputMode","otp","mask","autoCapitalize","autoComplete","placeholder","onBeforeInput","isValid","length","currentTarget","setSelectionRange","onChange","evt","onKeyDown","defaultPrevented","keyMap","Backspace","Delete","ArrowLeft","ArrowRight","Enter","exec","onFocus","onBlur","machine","userContext","initial","computed","ctx2","filledValueLength","filter","v","trim","join","focusedValue","entry","guard","actions","watch","on","states","idle","target","focused","guards","autoFocus","isValueEmpty","_ctx","hasValue","isFinalValue","findIndex","hasIndex","isDisabled","setupValue","inputEls","emptyValues","from","fill","assignValue","focusInput","preventScroll","selectInputIfNeeded","selectOnFocus","select","invokeOnComplete","onValueComplete","invokeOnInvalid","onValueInvalid","clearFocusedIndex","setFocusedIndex","set","setFocusedValue","nextValue","getNextValue","valueAtIndex","revertInputValue","inputEl","syncInputValue","syncInputElements","forEach","setPastedValue","startIndex","Math","min","left","substring","right","split","clearFocusedValue","setFocusIndexToFirst","setNextFocusedIndex","setPrevFocusedIndex","max","setLastValueFocusIndex","blurFocusedInputIfNeeded","blurOnComplete","blur","requestFormSubmit","requestSubmit","arr","Boolean","value2","current","next","invoke","change","onValueChange"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@zag-js/pin-input/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, queryAll, dataAttr, visuallyHiddenStyle, ariaAttr, getBeforeInputValue, getNativeEvent, isComposingEvent, isModifierKey, getEventKey, raf, dispatchInputValueEvent } from '@zag-js/dom-query';\nimport { invariant, compact, isEqual } from '@zag-js/utils';\nimport { createMachine, choose } from '@zag-js/core';\n\n// src/pin-input.anatomy.ts\nvar anatomy = createAnatomy(\"pinInput\").parts(\"root\", \"label\", \"input\", \"control\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: (ctx) => ctx.ids?.root ?? `pin-input:${ctx.id}`,\n  getInputId: (ctx, id) => ctx.ids?.input?.(id) ?? `pin-input:${ctx.id}:${id}`,\n  getHiddenInputId: (ctx) => ctx.ids?.hiddenInput ?? `pin-input:${ctx.id}:hidden`,\n  getLabelId: (ctx) => ctx.ids?.label ?? `pin-input:${ctx.id}:label`,\n  getControlId: (ctx) => ctx.ids?.control ?? `pin-input:${ctx.id}:control`,\n  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getInputEls: (ctx) => {\n    const ownerId = CSS.escape(dom.getRootId(ctx));\n    const selector = `input[data-ownedby=${ownerId}]`;\n    return queryAll(dom.getRootEl(ctx), selector);\n  },\n  getInputEl: (ctx, id) => dom.getById(ctx, dom.getInputId(ctx, id)),\n  getFocusedInputEl: (ctx) => dom.getInputEls(ctx)[ctx.focusedIndex],\n  getFirstInputEl: (ctx) => dom.getInputEls(ctx)[0],\n  getHiddenInputEl: (ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx))\n});\n\n// src/pin-input.utils.ts\nvar REGEX = {\n  numeric: /^[0-9]+$/,\n  alphabetic: /^[A-Za-z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i\n};\nfunction isValidType(ctx, value) {\n  if (!ctx.type) return true;\n  return !!REGEX[ctx.type]?.test(value);\n}\nfunction isValidValue(ctx, value) {\n  if (!ctx.pattern) return isValidType(ctx, value);\n  const regex = new RegExp(ctx.pattern, \"g\");\n  return regex.test(value);\n}\n\n// src/pin-input.connect.ts\nfunction connect(state, send, normalize) {\n  const complete = state.context.isValueComplete;\n  const invalid = state.context.invalid;\n  const focusedIndex = state.context.focusedIndex;\n  const translations = state.context.translations;\n  function focus() {\n    dom.getFirstInputEl(state.context)?.focus();\n  }\n  return {\n    focus,\n    value: state.context.value,\n    valueAsString: state.context.valueAsString,\n    complete,\n    setValue(value) {\n      if (!Array.isArray(value)) {\n        invariant(\"[pin-input/setValue] value must be an array\");\n      }\n      send({ type: \"VALUE.SET\", value });\n    },\n    clearValue() {\n      send({ type: \"VALUE.CLEAR\" });\n    },\n    setValueAtIndex(index, value) {\n      send({ type: \"VALUE.SET\", value, index });\n    },\n    getRootProps() {\n      return normalize.element({\n        dir: state.context.dir,\n        ...parts.root.attrs,\n        id: dom.getRootId(state.context),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(state.context.disabled),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(state.context.readOnly)\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: state.context.dir,\n        htmlFor: dom.getHiddenInputId(state.context),\n        id: dom.getLabelId(state.context),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(state.context.disabled),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(state.context.readOnly),\n        onClick(event) {\n          event.preventDefault();\n          focus();\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        \"aria-hidden\": true,\n        type: \"text\",\n        tabIndex: -1,\n        id: dom.getHiddenInputId(state.context),\n        readOnly: state.context.readOnly,\n        disabled: state.context.disabled,\n        required: state.context.required,\n        name: state.context.name,\n        form: state.context.form,\n        style: visuallyHiddenStyle,\n        maxLength: state.context.valueLength,\n        defaultValue: state.context.valueAsString\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context)\n      });\n    },\n    getInputProps(props) {\n      const { index } = props;\n      const inputType = state.context.type === \"numeric\" ? \"tel\" : \"text\";\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: state.context.dir,\n        disabled: state.context.disabled,\n        \"data-disabled\": dataAttr(state.context.disabled),\n        \"data-complete\": dataAttr(complete),\n        id: dom.getInputId(state.context, index.toString()),\n        \"data-ownedby\": dom.getRootId(state.context),\n        \"aria-label\": translations.inputLabel(index, state.context.valueLength),\n        inputMode: state.context.otp || state.context.type === \"numeric\" ? \"numeric\" : \"text\",\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        type: state.context.mask ? \"password\" : inputType,\n        defaultValue: state.context.value[index] || \"\",\n        readOnly: state.context.readOnly,\n        autoCapitalize: \"none\",\n        autoComplete: state.context.otp ? \"one-time-code\" : \"off\",\n        placeholder: focusedIndex === index ? \"\" : state.context.placeholder,\n        onBeforeInput(event) {\n          try {\n            const value = getBeforeInputValue(event);\n            const isValid = isValidValue(state.context, value);\n            if (!isValid) {\n              send({ type: \"VALUE.INVALID\", value });\n              event.preventDefault();\n            }\n            if (value.length > 2) {\n              event.currentTarget.setSelectionRange(0, 1, \"forward\");\n            }\n          } catch {\n          }\n        },\n        onChange(event) {\n          const evt = getNativeEvent(event);\n          const { value } = event.currentTarget;\n          if (evt.inputType === \"insertFromPaste\" || value.length > 2) {\n            send({ type: \"INPUT.PASTE\", value });\n            event.currentTarget.value = value[0];\n            event.preventDefault();\n            return;\n          }\n          if (evt.inputType === \"deleteContentBackward\") {\n            send(\"INPUT.BACKSPACE\");\n            return;\n          }\n          send({ type: \"INPUT.CHANGE\", value, index });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          if (isModifierKey(event)) return;\n          const keyMap = {\n            Backspace() {\n              send(\"INPUT.BACKSPACE\");\n            },\n            Delete() {\n              send(\"INPUT.DELETE\");\n            },\n            ArrowLeft() {\n              send(\"INPUT.ARROW_LEFT\");\n            },\n            ArrowRight() {\n              send(\"INPUT.ARROW_RIGHT\");\n            },\n            Enter() {\n              send(\"INPUT.ENTER\");\n            }\n          };\n          const exec = keyMap[getEventKey(event, state.context)];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        },\n        onFocus() {\n          send({ type: \"INPUT.FOCUS\", index });\n        },\n        onBlur() {\n          send({ type: \"INPUT.BLUR\", index });\n        }\n      });\n    }\n  };\n}\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine(\n    {\n      id: \"pin-input\",\n      initial: \"idle\",\n      context: {\n        value: [],\n        placeholder: \"\\u25CB\",\n        otp: false,\n        type: \"numeric\",\n        ...ctx,\n        focusedIndex: -1,\n        translations: {\n          inputLabel: (index, length) => `pin code ${index + 1} of ${length}`,\n          ...ctx.translations\n        }\n      },\n      computed: {\n        valueLength: (ctx2) => ctx2.value.length,\n        filledValueLength: (ctx2) => ctx2.value.filter((v) => v?.trim() !== \"\").length,\n        isValueComplete: (ctx2) => ctx2.valueLength === ctx2.filledValueLength,\n        valueAsString: (ctx2) => ctx2.value.join(\"\"),\n        focusedValue: (ctx2) => ctx2.value[ctx2.focusedIndex] || \"\"\n      },\n      entry: choose([\n        {\n          guard: \"autoFocus\",\n          actions: [\"setupValue\", \"setFocusIndexToFirst\"]\n        },\n        { actions: [\"setupValue\"] }\n      ]),\n      watch: {\n        focusedIndex: [\"focusInput\", \"selectInputIfNeeded\"],\n        value: [\"syncInputElements\"],\n        isValueComplete: [\"invokeOnComplete\", \"blurFocusedInputIfNeeded\"]\n      },\n      on: {\n        \"VALUE.SET\": [\n          {\n            guard: \"hasIndex\",\n            actions: [\"setValueAtIndex\"]\n          },\n          { actions: [\"setValue\"] }\n        ],\n        \"VALUE.CLEAR\": {\n          actions: [\"clearValue\", \"setFocusIndexToFirst\"]\n        }\n      },\n      states: {\n        idle: {\n          on: {\n            \"INPUT.FOCUS\": {\n              target: \"focused\",\n              actions: \"setFocusedIndex\"\n            }\n          }\n        },\n        focused: {\n          on: {\n            \"INPUT.CHANGE\": [\n              {\n                guard: \"isFinalValue\",\n                actions: [\"setFocusedValue\", \"syncInputValue\"]\n              },\n              {\n                actions: [\"setFocusedValue\", \"setNextFocusedIndex\", \"syncInputValue\"]\n              }\n            ],\n            \"INPUT.PASTE\": {\n              actions: [\"setPastedValue\", \"setLastValueFocusIndex\"]\n            },\n            \"INPUT.BLUR\": {\n              target: \"idle\",\n              actions: \"clearFocusedIndex\"\n            },\n            \"INPUT.DELETE\": {\n              guard: \"hasValue\",\n              actions: \"clearFocusedValue\"\n            },\n            \"INPUT.ARROW_LEFT\": {\n              actions: \"setPrevFocusedIndex\"\n            },\n            \"INPUT.ARROW_RIGHT\": {\n              actions: \"setNextFocusedIndex\"\n            },\n            \"INPUT.BACKSPACE\": [\n              {\n                guard: \"hasValue\",\n                actions: [\"clearFocusedValue\"]\n              },\n              {\n                actions: [\"setPrevFocusedIndex\", \"clearFocusedValue\"]\n              }\n            ],\n            \"INPUT.ENTER\": {\n              guard: \"isValueComplete\",\n              actions: \"requestFormSubmit\"\n            },\n            \"VALUE.INVALID\": {\n              actions: \"invokeOnInvalid\"\n            }\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        autoFocus: (ctx2) => !!ctx2.autoFocus,\n        isValueEmpty: (_ctx, evt) => evt.value === \"\",\n        hasValue: (ctx2) => ctx2.value[ctx2.focusedIndex] !== \"\",\n        isValueComplete: (ctx2) => ctx2.isValueComplete,\n        isFinalValue: (ctx2) => ctx2.filledValueLength + 1 === ctx2.valueLength && ctx2.value.findIndex((v) => v.trim() === \"\") === ctx2.focusedIndex,\n        hasIndex: (_ctx, evt) => evt.index !== void 0,\n        isDisabled: (ctx2) => !!ctx2.disabled\n      },\n      actions: {\n        setupValue(ctx2) {\n          if (ctx2.value.length) return;\n          const inputEls = dom.getInputEls(ctx2);\n          const emptyValues = Array.from({ length: inputEls.length }).fill(\"\");\n          assignValue(ctx2, emptyValues);\n        },\n        focusInput(ctx2) {\n          if (ctx2.focusedIndex === -1) return;\n          dom.getFocusedInputEl(ctx2)?.focus({ preventScroll: true });\n        },\n        selectInputIfNeeded(ctx2) {\n          if (!ctx2.selectOnFocus || ctx2.focusedIndex === -1) return;\n          raf(() => {\n            dom.getFocusedInputEl(ctx2)?.select();\n          });\n        },\n        invokeOnComplete(ctx2) {\n          if (!ctx2.isValueComplete) return;\n          ctx2.onValueComplete?.({\n            value: Array.from(ctx2.value),\n            valueAsString: ctx2.valueAsString\n          });\n        },\n        invokeOnInvalid(ctx2, evt) {\n          ctx2.onValueInvalid?.({\n            value: evt.value,\n            index: ctx2.focusedIndex\n          });\n        },\n        clearFocusedIndex(ctx2) {\n          ctx2.focusedIndex = -1;\n        },\n        setFocusedIndex(ctx2, evt) {\n          ctx2.focusedIndex = evt.index;\n        },\n        setValue(ctx2, evt) {\n          set.value(ctx2, evt.value);\n        },\n        setFocusedValue(ctx2, evt) {\n          const nextValue = getNextValue(ctx2.focusedValue, evt.value);\n          set.valueAtIndex(ctx2, ctx2.focusedIndex, nextValue);\n        },\n        revertInputValue(ctx2) {\n          const inputEl = dom.getFocusedInputEl(ctx2);\n          dom.setValue(inputEl, ctx2.focusedValue);\n        },\n        syncInputValue(ctx2, evt) {\n          const inputEl = dom.getInputEl(ctx2, evt.index.toString());\n          dom.setValue(inputEl, ctx2.value[evt.index]);\n        },\n        syncInputElements(ctx2) {\n          const inputEls = dom.getInputEls(ctx2);\n          inputEls.forEach((inputEl, index) => {\n            dom.setValue(inputEl, ctx2.value[index]);\n          });\n        },\n        setPastedValue(ctx2, evt) {\n          raf(() => {\n            const startIndex = Math.min(ctx2.focusedIndex, ctx2.filledValueLength);\n            const left = startIndex > 0 ? ctx2.valueAsString.substring(0, ctx2.focusedIndex) : \"\";\n            const right = evt.value.substring(0, ctx2.valueLength - startIndex);\n            const value = left + right;\n            set.value(ctx2, value.split(\"\"));\n          });\n        },\n        setValueAtIndex(ctx2, evt) {\n          const nextValue = getNextValue(ctx2.focusedValue, evt.value);\n          set.valueAtIndex(ctx2, evt.index, nextValue);\n        },\n        clearValue(ctx2) {\n          const nextValue = Array.from({ length: ctx2.valueLength }).fill(\"\");\n          set.value(ctx2, nextValue);\n        },\n        clearFocusedValue(ctx2) {\n          set.valueAtIndex(ctx2, ctx2.focusedIndex, \"\");\n        },\n        setFocusIndexToFirst(ctx2) {\n          ctx2.focusedIndex = 0;\n        },\n        setNextFocusedIndex(ctx2) {\n          ctx2.focusedIndex = Math.min(ctx2.focusedIndex + 1, ctx2.valueLength - 1);\n        },\n        setPrevFocusedIndex(ctx2) {\n          ctx2.focusedIndex = Math.max(ctx2.focusedIndex - 1, 0);\n        },\n        setLastValueFocusIndex(ctx2) {\n          raf(() => {\n            ctx2.focusedIndex = Math.min(ctx2.filledValueLength, ctx2.valueLength - 1);\n          });\n        },\n        blurFocusedInputIfNeeded(ctx2) {\n          if (!ctx2.blurOnComplete) return;\n          raf(() => {\n            dom.getFocusedInputEl(ctx2)?.blur();\n          });\n        },\n        requestFormSubmit(ctx2) {\n          if (!ctx2.name || !ctx2.isValueComplete) return;\n          const inputEl = dom.getHiddenInputEl(ctx2);\n          inputEl?.form?.requestSubmit();\n        }\n      }\n    }\n  );\n}\nfunction assignValue(ctx, value) {\n  const arr = Array.isArray(value) ? value : value.split(\"\").filter(Boolean);\n  arr.forEach((value2, index) => {\n    ctx.value[index] = value2;\n  });\n}\nfunction getNextValue(current, next) {\n  let nextValue = next;\n  if (current[0] === next[0]) nextValue = next[1];\n  else if (current[0] === next[1]) nextValue = next[0];\n  return nextValue.split(\"\")[nextValue.length - 1];\n}\nvar invoke = {\n  change(ctx) {\n    ctx.onValueChange?.({\n      value: Array.from(ctx.value),\n      valueAsString: ctx.valueAsString\n    });\n    const inputEl = dom.getHiddenInputEl(ctx);\n    dispatchInputValueEvent(inputEl, { value: ctx.valueAsString });\n  }\n};\nvar set = {\n  value(ctx, value) {\n    if (isEqual(ctx.value, value)) return;\n    assignValue(ctx, value);\n    invoke.change(ctx);\n  },\n  valueAtIndex(ctx, index, value) {\n    if (isEqual(ctx.value[index], value)) return;\n    ctx.value[index] = value;\n    invoke.change(ctx);\n  }\n};\n\nexport { anatomy, connect, machine };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}