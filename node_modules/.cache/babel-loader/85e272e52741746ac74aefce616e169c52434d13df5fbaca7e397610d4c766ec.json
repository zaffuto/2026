{"ast":null,"code":"\"use strict\";\n\nconst colorMix = (value, token) => {\n  if (!value || typeof value !== \"string\") {\n    return {\n      invalid: true,\n      value\n    };\n  }\n  const [rawColor, rawOpacity] = value.split(\"/\");\n  if (!rawColor || !rawOpacity || rawColor === \"currentBg\") {\n    return {\n      invalid: true,\n      value: rawColor\n    };\n  }\n  const colorToken = token(`colors.${rawColor}`);\n  const opacityToken = token.raw(`opacity.${rawOpacity}`)?.value;\n  if (!opacityToken && isNaN(Number(rawOpacity))) {\n    return {\n      invalid: true,\n      value: rawColor\n    };\n  }\n  const percent = opacityToken ? Number(opacityToken) * 100 + \"%\" : `${rawOpacity}%`;\n  const color = colorToken ?? rawColor;\n  return {\n    invalid: false,\n    color,\n    value: `color-mix(in srgb, ${color} ${percent}, transparent)`\n  };\n};\nconst createColorMixTransform = prop => (value, args) => {\n  const mix = args.utils.colorMix(value);\n  if (mix.invalid) return {\n    [prop]: value\n  };\n  const cssVar = \"--mix-\" + prop;\n  return {\n    [cssVar]: mix.value,\n    [prop]: `var(${cssVar}, ${mix.color})`\n  };\n};\nexport { colorMix, createColorMixTransform };","map":{"version":3,"names":["colorMix","value","token","invalid","rawColor","rawOpacity","split","colorToken","opacityToken","raw","isNaN","Number","percent","color","createColorMixTransform","prop","args","mix","utils","cssVar"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@chakra-ui/react/dist/esm/styled-system/color-mix.js"],"sourcesContent":["\"use strict\";\nconst colorMix = (value, token) => {\n  if (!value || typeof value !== \"string\") {\n    return { invalid: true, value };\n  }\n  const [rawColor, rawOpacity] = value.split(\"/\");\n  if (!rawColor || !rawOpacity || rawColor === \"currentBg\") {\n    return { invalid: true, value: rawColor };\n  }\n  const colorToken = token(`colors.${rawColor}`);\n  const opacityToken = token.raw(`opacity.${rawOpacity}`)?.value;\n  if (!opacityToken && isNaN(Number(rawOpacity))) {\n    return { invalid: true, value: rawColor };\n  }\n  const percent = opacityToken ? Number(opacityToken) * 100 + \"%\" : `${rawOpacity}%`;\n  const color = colorToken ?? rawColor;\n  return {\n    invalid: false,\n    color,\n    value: `color-mix(in srgb, ${color} ${percent}, transparent)`\n  };\n};\nconst createColorMixTransform = (prop) => (value, args) => {\n  const mix = args.utils.colorMix(value);\n  if (mix.invalid) return { [prop]: value };\n  const cssVar = \"--mix-\" + prop;\n  return {\n    [cssVar]: mix.value,\n    [prop]: `var(${cssVar}, ${mix.color})`\n  };\n};\n\nexport { colorMix, createColorMixTransform };\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,QAAQ,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EACjC,IAAI,CAACD,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACvC,OAAO;MAAEE,OAAO,EAAE,IAAI;MAAEF;IAAM,CAAC;EACjC;EACA,MAAM,CAACG,QAAQ,EAAEC,UAAU,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;EAC/C,IAAI,CAACF,QAAQ,IAAI,CAACC,UAAU,IAAID,QAAQ,KAAK,WAAW,EAAE;IACxD,OAAO;MAAED,OAAO,EAAE,IAAI;MAAEF,KAAK,EAAEG;IAAS,CAAC;EAC3C;EACA,MAAMG,UAAU,GAAGL,KAAK,CAAC,UAAUE,QAAQ,EAAE,CAAC;EAC9C,MAAMI,YAAY,GAAGN,KAAK,CAACO,GAAG,CAAC,WAAWJ,UAAU,EAAE,CAAC,EAAEJ,KAAK;EAC9D,IAAI,CAACO,YAAY,IAAIE,KAAK,CAACC,MAAM,CAACN,UAAU,CAAC,CAAC,EAAE;IAC9C,OAAO;MAAEF,OAAO,EAAE,IAAI;MAAEF,KAAK,EAAEG;IAAS,CAAC;EAC3C;EACA,MAAMQ,OAAO,GAAGJ,YAAY,GAAGG,MAAM,CAACH,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAGH,UAAU,GAAG;EAClF,MAAMQ,KAAK,GAAGN,UAAU,IAAIH,QAAQ;EACpC,OAAO;IACLD,OAAO,EAAE,KAAK;IACdU,KAAK;IACLZ,KAAK,EAAE,sBAAsBY,KAAK,IAAID,OAAO;EAC/C,CAAC;AACH,CAAC;AACD,MAAME,uBAAuB,GAAIC,IAAI,IAAK,CAACd,KAAK,EAAEe,IAAI,KAAK;EACzD,MAAMC,GAAG,GAAGD,IAAI,CAACE,KAAK,CAAClB,QAAQ,CAACC,KAAK,CAAC;EACtC,IAAIgB,GAAG,CAACd,OAAO,EAAE,OAAO;IAAE,CAACY,IAAI,GAAGd;EAAM,CAAC;EACzC,MAAMkB,MAAM,GAAG,QAAQ,GAAGJ,IAAI;EAC9B,OAAO;IACL,CAACI,MAAM,GAAGF,GAAG,CAAChB,KAAK;IACnB,CAACc,IAAI,GAAG,OAAOI,MAAM,KAAKF,GAAG,CAACJ,KAAK;EACrC,CAAC;AACH,CAAC;AAED,SAASb,QAAQ,EAAEc,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}