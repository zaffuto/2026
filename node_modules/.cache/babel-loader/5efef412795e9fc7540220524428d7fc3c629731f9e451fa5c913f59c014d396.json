{"ast":null,"code":"import { clone, snapshot, proxy, proxyWithComputed, subscribe, ref } from '@zag-js/store';\nexport { proxy, ref, snapshot, subscribe } from '@zag-js/store';\nimport { compact, isPlainObject, uuid, cast, callAll, isString, isFunction, noop, isObject, runIfFn, invariant, clear, isArray, hasProp, warn, isDev, isNumber } from '@zag-js/utils';\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nfunction deepMerge(source, ...objects) {\n  for (const obj of objects) {\n    const target = compact(obj);\n    for (const key in target) {\n      if (isPlainObject(obj[key])) {\n        if (!source[key]) {\n          source[key] = {};\n        }\n        deepMerge(source[key], obj[key]);\n      } else {\n        source[key] = obj[key];\n      }\n    }\n  }\n  return source;\n}\nfunction toEvent(event) {\n  const obj = isString(event) ? {\n    type: event\n  } : event;\n  return obj;\n}\nfunction toArray(value) {\n  if (!value) return [];\n  return isArray(value) ? value.slice() : [value];\n}\nfunction isGuardHelper(value) {\n  return isObject(value) && value.predicate != null;\n}\n\n// src/guard-utils.ts\nvar Truthy = () => true;\nfunction exec(guardMap, ctx, event, meta) {\n  return guard => {\n    if (isString(guard)) {\n      return !!guardMap[guard]?.(ctx, event, meta);\n    }\n    if (isFunction(guard)) {\n      return guard(ctx, event, meta);\n    }\n    return guard.predicate(guardMap)(ctx, event, meta);\n  };\n}\nfunction or(...conditions) {\n  return {\n    predicate: guardMap => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).some(Boolean)\n  };\n}\nfunction and(...conditions) {\n  return {\n    predicate: guardMap => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).every(Boolean)\n  };\n}\nfunction not(condition) {\n  return {\n    predicate: guardMap => (ctx, event, meta) => {\n      return !exec(guardMap, ctx, event, meta)(condition);\n    }\n  };\n}\nfunction stateIn(...values) {\n  return (_ctx, _evt, meta) => meta.state.matches(...values);\n}\nvar guards = {\n  or,\n  and,\n  not,\n  stateIn\n};\nfunction choose(actions) {\n  return {\n    predicate: guardMap => (ctx, event, meta) => actions.find(def => {\n      const guard = def.guard ?? Truthy;\n      return exec(guardMap, ctx, event, meta)(guard);\n    })?.actions\n  };\n}\nfunction determineGuardFn(guard, guardMap) {\n  guard = guard ?? Truthy;\n  return (context, event, meta) => {\n    if (isString(guard)) {\n      const value = guardMap[guard];\n      return isFunction(value) ? value(context, event, meta) : value;\n    }\n    if (isGuardHelper(guard)) {\n      return guard.predicate(guardMap)(context, event, meta);\n    }\n    return guard?.(context, event, meta);\n  };\n}\nfunction determineActionsFn(values, guardMap) {\n  return (context, event, meta) => {\n    if (isGuardHelper(values)) {\n      return values.predicate(guardMap)(context, event, meta);\n    }\n    return values;\n  };\n}\nfunction createProxy(config) {\n  const computedContext = config.computed ?? cast({});\n  const initialContext = config.context ?? cast({});\n  const initialTags = config.initial ? config.states?.[config.initial]?.tags : [];\n  const state = proxy({\n    value: config.initial ?? \"\",\n    previousValue: \"\",\n    event: cast({}),\n    previousEvent: cast({}),\n    context: proxyWithComputed(initialContext, computedContext),\n    done: false,\n    tags: initialTags ?? [],\n    hasTag(tag) {\n      return this.tags.includes(tag);\n    },\n    matches(...value) {\n      return value.includes(this.value);\n    },\n    can(event) {\n      return cast(this).nextEvents.includes(event);\n    },\n    get nextEvents() {\n      const stateEvents = config.states?.[this.value]?.[\"on\"] ?? {};\n      const globalEvents = config?.on ?? {};\n      return Object.keys({\n        ...stateEvents,\n        ...globalEvents\n      });\n    },\n    get changed() {\n      if (this.event.value === \"machine.init\" /* Init */ || !this.previousValue) return false;\n      return this.value !== this.previousValue;\n    }\n  });\n  return cast(state);\n}\nfunction determineDelayFn(delay, delaysMap) {\n  return (context, event) => {\n    if (isNumber(delay)) return delay;\n    if (isFunction(delay)) {\n      return delay(context, event);\n    }\n    if (isString(delay)) {\n      const value = Number.parseFloat(delay);\n      if (!Number.isNaN(value)) {\n        return value;\n      }\n      if (delaysMap) {\n        const valueOrFn = delaysMap?.[delay];\n        invariant(valueOrFn == null, `[@zag-js/core > determine-delay] Cannot determine delay for \\`${delay}\\`. It doesn't exist in \\`options.delays\\``);\n        return isFunction(valueOrFn) ? valueOrFn(context, event) : valueOrFn;\n      }\n    }\n  };\n}\nfunction toTarget(target) {\n  return isString(target) ? {\n    target\n  } : target;\n}\nfunction determineTransitionFn(transitions, guardMap) {\n  return (context, event, meta) => {\n    return toArray(transitions).map(toTarget).find(transition => {\n      const determineGuard = determineGuardFn(transition.guard, guardMap);\n      const guard = determineGuard(context, event, meta);\n      return guard ?? transition.target ?? transition.actions;\n    });\n  };\n}\n\n// src/machine.ts\nvar Machine = class {\n  // Let's get started!\n  constructor(config, options) {\n    __publicField(this, \"status\", \"Not Started\" /* NotStarted */);\n    __publicField(this, \"state\");\n    __publicField(this, \"initialState\");\n    __publicField(this, \"initialContext\");\n    __publicField(this, \"id\");\n    __publicField(this, \"type\", \"machine\" /* Machine */);\n    // Cleanup function map (per state)\n    __publicField(this, \"activityEvents\", /* @__PURE__ */new Map());\n    __publicField(this, \"delayedEvents\", /* @__PURE__ */new Map());\n    // state update listeners the user can opt-in for\n    __publicField(this, \"stateListeners\", /* @__PURE__ */new Set());\n    __publicField(this, \"doneListeners\", /* @__PURE__ */new Set());\n    __publicField(this, \"contextWatchers\", /* @__PURE__ */new Set());\n    // Cleanup functions (for `subscribe`)\n    __publicField(this, \"removeStateListener\", noop);\n    // For Parent <==> Spawned Actor relationship\n    __publicField(this, \"parent\");\n    __publicField(this, \"children\", /* @__PURE__ */new Map());\n    // A map of guard, action, delay implementations\n    __publicField(this, \"guardMap\");\n    __publicField(this, \"actionMap\");\n    __publicField(this, \"delayMap\");\n    __publicField(this, \"activityMap\");\n    __publicField(this, \"sync\");\n    __publicField(this, \"options\");\n    __publicField(this, \"config\");\n    // created actions\n    __publicField(this, \"_created\", () => {\n      if (!this.config.created) return;\n      const event = toEvent(\"machine.created\" /* Created */);\n      this.executeActions(this.config.created, event);\n    });\n    // Starts the interpreted machine.\n    __publicField(this, \"start\", init => {\n      this.state.value = \"\";\n      this.state.tags = [];\n      if (this.status === \"Running\" /* Running */) {\n        return this;\n      }\n      this.status = \"Running\" /* Running */;\n      this.removeStateListener = subscribe(this.state, () => {\n        this.stateListeners.forEach(listener => {\n          listener(this.stateSnapshot);\n        });\n      }, this.sync);\n      this.setupContextWatchers();\n      this.executeActivities(toEvent(\"machine.start\" /* Start */), toArray(this.config.activities), \"machine.start\" /* Start */);\n      this.executeActions(this.config.entry, toEvent(\"machine.start\" /* Start */));\n      const event = toEvent(\"machine.init\" /* Init */);\n      const target = isObject(init) ? init.value : init;\n      const context = isObject(init) ? init.context : void 0;\n      if (context) {\n        this.setContext(context);\n      }\n      const transition = {\n        target: target ?? this.config.initial\n      };\n      const next = this.getNextStateInfo(transition, event);\n      this.initialState = next;\n      this.performStateChangeEffects(this.state.value, next, event);\n      return this;\n    });\n    __publicField(this, \"setupContextWatchers\", () => {\n      const {\n        watch\n      } = this.config;\n      if (!watch) return;\n      let prev = snapshot(this.state.context);\n      const cleanup = subscribe(this.state.context, () => {\n        const next = snapshot(this.state.context);\n        for (const [key, fn] of Object.entries(watch)) {\n          const isEqual = this.options.compareFns?.[key] ?? Object.is;\n          if (isEqual(prev[key], next[key])) continue;\n          this.executeActions(fn, this.state.event);\n        }\n        prev = next;\n      });\n      this.contextWatchers.add(cleanup);\n    });\n    // Stops the interpreted machine\n    __publicField(this, \"stop\", () => {\n      if (this.status === \"Stopped\" /* Stopped */) return;\n      this.performExitEffects(this.state.value, toEvent(\"machine.stop\" /* Stop */));\n      this.executeActions(this.config.exit, toEvent(\"machine.stop\" /* Stop */));\n      this.setState(\"\");\n      this.setEvent(\"machine.stop\" /* Stop */);\n      this.stopStateListeners();\n      this.stopChildren();\n      this.stopActivities();\n      this.stopDelayedEvents();\n      this.stopContextWatchers();\n      this.status = \"Stopped\" /* Stopped */;\n      return this;\n    });\n    __publicField(this, \"stopStateListeners\", () => {\n      this.removeStateListener();\n      this.stateListeners.clear();\n    });\n    __publicField(this, \"stopContextWatchers\", () => {\n      this.contextWatchers.forEach(fn => fn());\n      this.contextWatchers.clear();\n    });\n    __publicField(this, \"stopDelayedEvents\", () => {\n      this.delayedEvents.forEach(state => {\n        state.forEach(stop => stop());\n      });\n      this.delayedEvents.clear();\n    });\n    // Cleanup running activities (e.g `setInterval`, invoked callbacks, promises)\n    __publicField(this, \"stopActivities\", state => {\n      if (state) {\n        this.activityEvents.get(state)?.forEach(stop => stop());\n        this.activityEvents.get(state)?.clear();\n        this.activityEvents.delete(state);\n      } else {\n        this.activityEvents.forEach(state2 => {\n          state2.forEach(stop => stop());\n          state2.clear();\n        });\n        this.activityEvents.clear();\n      }\n    });\n    /**\n     * Function to send event to spawned child machine or actor\n     */\n    __publicField(this, \"sendChild\", (evt, to) => {\n      const event = toEvent(evt);\n      const id = runIfFn(to, this.contextSnapshot);\n      const child = this.children.get(id);\n      if (!child) {\n        invariant(`[@zag-js/core] Cannot send '${event.type}' event to unknown child`);\n      }\n      child.send(event);\n    });\n    /**\n     * Function to stop a running child machine or actor\n     */\n    __publicField(this, \"stopChild\", id => {\n      if (!this.children.has(id)) {\n        invariant(`[@zag-js/core > stop-child] Cannot stop unknown child ${id}`);\n      }\n      this.children.get(id).stop();\n      this.children.delete(id);\n    });\n    __publicField(this, \"removeChild\", id => {\n      this.children.delete(id);\n    });\n    // Stop and delete spawned actors\n    __publicField(this, \"stopChildren\", () => {\n      this.children.forEach(child => child.stop());\n      this.children.clear();\n    });\n    __publicField(this, \"setParent\", parent => {\n      this.parent = parent;\n    });\n    __publicField(this, \"spawn\", (src, id) => {\n      const actor = runIfFn(src);\n      if (id) actor.id = id;\n      actor.type = \"machine.actor\" /* Actor */;\n      actor.setParent(this);\n      this.children.set(actor.id, cast(actor));\n      actor.onDone(() => {\n        this.removeChild(actor.id);\n      }).start();\n      return cast(ref(actor));\n    });\n    __publicField(this, \"stopActivity\", key => {\n      if (!this.state.value) return;\n      const cleanups = this.activityEvents.get(this.state.value);\n      cleanups?.get(key)?.();\n      cleanups?.delete(key);\n    });\n    __publicField(this, \"addActivityCleanup\", (state, key, cleanup) => {\n      if (!state) return;\n      if (!this.activityEvents.has(state)) {\n        this.activityEvents.set(state, /* @__PURE__ */new Map([[key, cleanup]]));\n      } else {\n        this.activityEvents.get(state)?.set(key, cleanup);\n      }\n    });\n    __publicField(this, \"setState\", target => {\n      this.state.previousValue = this.state.value;\n      this.state.value = target;\n      const stateNode = this.getStateNode(target);\n      if (target == null) {\n        clear(this.state.tags);\n      } else {\n        this.state.tags = toArray(stateNode?.tags);\n      }\n    });\n    /**\n     * To used within side effects for React or Vue to update context\n     */\n    __publicField(this, \"setContext\", context => {\n      if (!context) return;\n      deepMerge(this.state.context, compact(context));\n    });\n    __publicField(this, \"setOptions\", options => {\n      const opts = compact(options);\n      this.actionMap = {\n        ...this.actionMap,\n        ...opts.actions\n      };\n      this.delayMap = {\n        ...this.delayMap,\n        ...opts.delays\n      };\n      this.activityMap = {\n        ...this.activityMap,\n        ...opts.activities\n      };\n      this.guardMap = {\n        ...this.guardMap,\n        ...opts.guards\n      };\n    });\n    __publicField(this, \"getStateNode\", state => {\n      if (!state) return;\n      return this.config.states?.[state];\n    });\n    __publicField(this, \"getNextStateInfo\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      const isTargetless = !transition?.target;\n      const target = transition?.target ?? this.state.value;\n      const changed = this.state.value !== target;\n      const stateNode = this.getStateNode(target);\n      const reenter = !isTargetless && !changed && !transition?.internal;\n      const info = {\n        reenter,\n        transition,\n        stateNode,\n        target,\n        changed\n      };\n      this.log(\"NextState:\", `[${event.type}]`, this.state.value, \"---->\", info.target);\n      return info;\n    });\n    __publicField(this, \"getAfterActions\", (transition, delay) => {\n      let id;\n      const current = this.state.value;\n      return {\n        entry: () => {\n          id = globalThis.setTimeout(() => {\n            const next = this.getNextStateInfo(transition, this.state.event);\n            this.performStateChangeEffects(current, next, this.state.event);\n          }, delay);\n        },\n        exit: () => {\n          globalThis.clearTimeout(id);\n        }\n      };\n    });\n    /**\n     * All `after` events leverage `setTimeout` and `clearTimeout`,\n     * we invoke the `clearTimeout` on exit and `setTimeout` on entry.\n     *\n     * To achieve this, we split the `after` definition into `entry` and `exit`\n     *  functions and append them to the state's `entry` and `exit` actions\n     */\n    __publicField(this, \"getDelayedEventActions\", state => {\n      const stateNode = this.getStateNode(state);\n      const event = this.state.event;\n      if (!stateNode || !stateNode.after) return;\n      const entries = [];\n      const exits = [];\n      if (isArray(stateNode.after)) {\n        const transition = this.determineTransition(stateNode.after, event);\n        if (!transition) return;\n        if (!hasProp(transition, \"delay\")) {\n          throw new Error(`[@zag-js/core > after] Delay is required for after transition: ${JSON.stringify(transition)}`);\n        }\n        const determineDelay = determineDelayFn(transition.delay, this.delayMap);\n        const __delay = determineDelay(this.contextSnapshot, event);\n        const actions = this.getAfterActions(transition, __delay);\n        entries.push(actions.entry);\n        exits.push(actions.exit);\n        return {\n          entries,\n          exits\n        };\n      }\n      if (isObject(stateNode.after)) {\n        for (const delay in stateNode.after) {\n          const transition = stateNode.after[delay];\n          const determineDelay = determineDelayFn(delay, this.delayMap);\n          const __delay = determineDelay(this.contextSnapshot, event);\n          const actions = this.getAfterActions(transition, __delay);\n          entries.push(actions.entry);\n          exits.push(actions.exit);\n        }\n      }\n      return {\n        entries,\n        exits\n      };\n    });\n    /**\n     * Function to executes defined actions. It can accept actions as string\n     * (referencing `options.actions`) or actual functions.\n     */\n    __publicField(this, \"executeActions\", (actions, event) => {\n      const pickedActions = determineActionsFn(actions, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      for (const action of toArray(pickedActions)) {\n        const fn = isString(action) ? this.actionMap?.[action] : action;\n        warn(isString(action) && !fn, `[@zag-js/core > execute-actions] No implementation found for action: \\`${action}\\``);\n        fn?.(this.state.context, event, this.meta);\n      }\n    });\n    /**\n     * Function to execute running activities and registers\n     * their cleanup function internally (to be called later on when we exit the state)\n     */\n    __publicField(this, \"executeActivities\", (event, activities, state) => {\n      for (const activity of activities) {\n        const fn = isString(activity) ? this.activityMap?.[activity] : activity;\n        if (!fn) {\n          warn(`[@zag-js/core > execute-activity] No implementation found for activity: \\`${activity}\\``);\n          continue;\n        }\n        const cleanup = fn(this.state.context, event, this.meta);\n        if (cleanup) {\n          const key = isString(activity) ? activity : activity.name || uuid();\n          this.addActivityCleanup(state ?? this.state.value, key, cleanup);\n        }\n      }\n    });\n    /**\n     * Normalizes the `every` definition to transition. `every` can be:\n     * - An array of possible actions to run (we need to pick the first match based on guard)\n     * - An object of intervals and actions\n     */\n    __publicField(this, \"createEveryActivities\", (every, callbackfn) => {\n      if (!every) return;\n      if (isArray(every)) {\n        const picked = toArray(every).find(transition => {\n          const delayOrFn = transition.delay;\n          const determineDelay2 = determineDelayFn(delayOrFn, this.delayMap);\n          const delay2 = determineDelay2(this.contextSnapshot, this.state.event);\n          const determineGuard = determineGuardFn(transition.guard, this.guardMap);\n          const guard = determineGuard(this.contextSnapshot, this.state.event, this.guardMeta);\n          return guard ?? delay2 != null;\n        });\n        if (!picked) return;\n        const determineDelay = determineDelayFn(picked.delay, this.delayMap);\n        const delay = determineDelay(this.contextSnapshot, this.state.event);\n        const activity = () => {\n          const id = globalThis.setInterval(() => {\n            this.executeActions(picked.actions, this.state.event);\n          }, delay);\n          return () => {\n            globalThis.clearInterval(id);\n          };\n        };\n        callbackfn(activity);\n      } else {\n        for (const interval in every) {\n          const actions = every?.[interval];\n          const determineDelay = determineDelayFn(interval, this.delayMap);\n          const delay = determineDelay(this.contextSnapshot, this.state.event);\n          const activity = () => {\n            const id = globalThis.setInterval(() => {\n              this.executeActions(actions, this.state.event);\n            }, delay);\n            return () => {\n              globalThis.clearInterval(id);\n            };\n          };\n          callbackfn(activity);\n        }\n      }\n    });\n    __publicField(this, \"setEvent\", event => {\n      this.state.previousEvent = this.state.event;\n      this.state.event = ref(toEvent(event));\n    });\n    __publicField(this, \"performExitEffects\", (current, event) => {\n      const currentState = this.state.value;\n      if (currentState === \"\") return;\n      const stateNode = current ? this.getStateNode(current) : void 0;\n      this.stopActivities(currentState);\n      const _exit = determineActionsFn(stateNode?.exit, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      const exitActions = toArray(_exit);\n      const afterExitActions = this.delayedEvents.get(currentState);\n      if (afterExitActions) {\n        exitActions.push(...afterExitActions);\n      }\n      this.executeActions(exitActions, event);\n      this.delayedEvents.delete(currentState);\n    });\n    __publicField(this, \"performEntryEffects\", (next, event) => {\n      const stateNode = this.getStateNode(next);\n      const activities = toArray(stateNode?.activities);\n      this.createEveryActivities(stateNode?.every, activity => {\n        activities.unshift(activity);\n      });\n      if (activities.length > 0) {\n        this.executeActivities(event, activities);\n      }\n      const pickedActions = determineActionsFn(stateNode?.entry, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      const entryActions = toArray(pickedActions);\n      const afterActions = this.getDelayedEventActions(next);\n      if (stateNode?.after && afterActions) {\n        this.delayedEvents.set(next, afterActions?.exits);\n        entryActions.push(...afterActions.entries);\n      }\n      this.executeActions(entryActions, event);\n      if (stateNode?.type === \"final\") {\n        this.state.done = true;\n        this.doneListeners.forEach(listener => {\n          listener(this.stateSnapshot);\n        });\n        this.stop();\n      }\n    });\n    __publicField(this, \"performTransitionEffects\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      this.executeActions(transition?.actions, event);\n    });\n    /**\n     * Performs all the requires side-effects or reactions when\n     * we move from state A => state B.\n     *\n     * The Effect order:\n     * Exit actions (current state) => Transition actions  => Go to state => Entry actions (next state)\n     */\n    __publicField(this, \"performStateChangeEffects\", (current, next, event) => {\n      this.setEvent(event);\n      const changed = next.changed || next.reenter;\n      if (changed) {\n        this.performExitEffects(current, event);\n      }\n      this.performTransitionEffects(next.transition, event);\n      this.setState(next.target);\n      if (changed) {\n        this.performEntryEffects(next.target, event);\n      }\n    });\n    __publicField(this, \"determineTransition\", (transition, event) => {\n      const fn = determineTransitionFn(transition, this.guardMap);\n      return fn?.(this.contextSnapshot, event, this.guardMeta);\n    });\n    /**\n     * Function to send event to parent machine from spawned child\n     */\n    __publicField(this, \"sendParent\", evt => {\n      if (!this.parent) {\n        invariant(\"[@zag-js/core > send-parent] Cannot send event to an unknown parent\");\n      }\n      const event = toEvent(evt);\n      this.parent?.send(event);\n    });\n    __publicField(this, \"log\", (...args) => {\n      if (isDev() && this.options.debug) {\n        console.log(...args);\n      }\n    });\n    /**\n     * Function to send an event to current machine\n     */\n    __publicField(this, \"send\", evt => {\n      const event = toEvent(evt);\n      this.transition(this.state.value, event);\n    });\n    __publicField(this, \"transition\", (state, evt) => {\n      const stateNode = isString(state) ? this.getStateNode(state) : state?.stateNode;\n      const event = toEvent(evt);\n      if (!stateNode && !this.config.on) {\n        const msg = this.status === \"Stopped\" /* Stopped */ ? \"[@zag-js/core > transition] Cannot transition a stopped machine\" : `[@zag-js/core > transition] State does not have a definition for \\`state\\`: ${state}, \\`event\\`: ${event.type}`;\n        warn(msg);\n        return;\n      }\n      const transitions =\n      // @ts-expect-error - Fix this\n      stateNode?.on?.[event.type] ?? this.config.on?.[event.type];\n      const next = this.getNextStateInfo(transitions, event);\n      this.performStateChangeEffects(this.state.value, next, event);\n      return next.stateNode;\n    });\n    __publicField(this, \"subscribe\", listener => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return () => {\n        this.stateListeners.delete(listener);\n      };\n    });\n    __publicField(this, \"onDone\", listener => {\n      this.doneListeners.add(listener);\n      return this;\n    });\n    __publicField(this, \"onTransition\", listener => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return this;\n    });\n    this.config = clone(config);\n    this.options = clone(options ?? {});\n    this.id = this.config.id ?? `machine-${uuid()}`;\n    this.guardMap = this.options?.guards ?? {};\n    this.actionMap = this.options?.actions ?? {};\n    this.delayMap = this.options?.delays ?? {};\n    this.activityMap = this.options?.activities ?? {};\n    this.sync = this.options?.sync ?? false;\n    this.state = createProxy(this.config);\n    this.initialContext = snapshot(this.state.context);\n  }\n  // immutable state value\n  get stateSnapshot() {\n    return cast(snapshot(this.state));\n  }\n  getState() {\n    return this.stateSnapshot;\n  }\n  // immutable context value\n  get contextSnapshot() {\n    return this.stateSnapshot.context;\n  }\n  /**\n   * A reference to the instance methods of the machine.\n   * Useful when spawning child machines and managing the communication between them.\n   */\n  get self() {\n    const self = this;\n    return {\n      id: this.id,\n      send: this.send.bind(this),\n      sendParent: this.sendParent.bind(this),\n      sendChild: this.sendChild.bind(this),\n      stop: this.stop.bind(this),\n      stopChild: this.stopChild.bind(this),\n      spawn: this.spawn.bind(this),\n      stopActivity: this.stopActivity.bind(this),\n      get state() {\n        return self.stateSnapshot;\n      },\n      get initialContext() {\n        return self.initialContext;\n      },\n      get initialState() {\n        return self.initialState?.target ?? \"\";\n      }\n    };\n  }\n  get meta() {\n    return {\n      state: this.stateSnapshot,\n      guards: this.guardMap,\n      send: this.send.bind(this),\n      self: this.self,\n      initialContext: this.initialContext,\n      initialState: this.initialState?.target ?? \"\",\n      getState: () => this.stateSnapshot,\n      getAction: key => this.actionMap[key],\n      getGuard: key => this.guardMap[key]\n    };\n  }\n  get guardMeta() {\n    return {\n      state: this.stateSnapshot\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return \"Machine\";\n  }\n  getHydrationState() {\n    const state = this.getState();\n    return {\n      value: state.value,\n      tags: state.tags\n    };\n  }\n};\nvar createMachine = (config, options) => new Machine(config, options);\nvar isMachine = value => {\n  return value instanceof Machine || value?.type === \"machine\" /* Machine */;\n};\nvar clsx = (...args) => args.map(str => str?.trim?.()).filter(Boolean).join(\" \");\nvar CSS_REGEX = /((?:--)?(?:\\w+-?)+)\\s*:\\s*([^;]*)/g;\nvar serialize = style => {\n  const res = {};\n  let match;\n  while (match = CSS_REGEX.exec(style)) {\n    res[match[1]] = match[2];\n  }\n  return res;\n};\nvar css = (a, b) => {\n  if (isString(a)) {\n    if (isString(b)) return `${a};${b}`;\n    a = serialize(a);\n  } else if (isString(b)) {\n    b = serialize(b);\n  }\n  return Object.assign({}, a ?? {}, b ?? {});\n};\nfunction mergeProps(...args) {\n  let result = {};\n  for (let props of args) {\n    for (let key in result) {\n      if (key.startsWith(\"on\") && typeof result[key] === \"function\" && typeof props[key] === \"function\") {\n        result[key] = callAll(props[key], result[key]);\n        continue;\n      }\n      if (key === \"className\" || key === \"class\") {\n        result[key] = clsx(result[key], props[key]);\n        continue;\n      }\n      if (key === \"style\") {\n        result[key] = css(result[key], props[key]);\n        continue;\n      }\n      result[key] = props[key] !== void 0 ? props[key] : result[key];\n    }\n    for (let key in props) {\n      if (result[key] === void 0) {\n        result[key] = props[key];\n      }\n    }\n  }\n  return result;\n}\nexport { Machine, choose, createMachine, deepMerge, guards, isMachine, mergeProps };","map":{"version":3,"names":["clone","snapshot","proxy","proxyWithComputed","subscribe","ref","compact","isPlainObject","uuid","cast","callAll","isString","isFunction","noop","isObject","runIfFn","invariant","clear","isArray","hasProp","warn","isDev","isNumber","__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","deepMerge","source","objects","target","toEvent","event","type","toArray","slice","isGuardHelper","predicate","Truthy","exec","guardMap","ctx","meta","guard","or","conditions","map","some","Boolean","and","every","not","condition","stateIn","values","_ctx","_evt","state","matches","guards","choose","actions","find","def","determineGuardFn","context","determineActionsFn","createProxy","config","computedContext","computed","initialContext","initialTags","initial","states","tags","previousValue","previousEvent","done","hasTag","tag","includes","can","nextEvents","stateEvents","globalEvents","on","keys","changed","determineDelayFn","delay","delaysMap","Number","parseFloat","isNaN","valueOrFn","toTarget","determineTransitionFn","transitions","transition","determineGuard","Machine","constructor","options","Map","Set","created","executeActions","init","status","removeStateListener","stateListeners","forEach","listener","stateSnapshot","sync","setupContextWatchers","executeActivities","activities","entry","setContext","next","getNextStateInfo","initialState","performStateChangeEffects","watch","prev","cleanup","fn","entries","isEqual","compareFns","is","contextWatchers","add","performExitEffects","exit","setState","setEvent","stopStateListeners","stopChildren","stopActivities","stopDelayedEvents","stopContextWatchers","delayedEvents","stop","activityEvents","get","delete","state2","evt","to","id","contextSnapshot","child","children","send","has","parent","src","actor","setParent","set","onDone","removeChild","start","cleanups","stateNode","getStateNode","opts","actionMap","delayMap","delays","activityMap","determineTransition","isTargetless","reenter","internal","info","log","current","globalThis","setTimeout","clearTimeout","after","exits","Error","JSON","stringify","determineDelay","__delay","getAfterActions","push","pickedActions","guardMeta","action","activity","name","addActivityCleanup","callbackfn","picked","delayOrFn","determineDelay2","delay2","setInterval","clearInterval","interval","currentState","_exit","exitActions","afterExitActions","createEveryActivities","unshift","length","entryActions","afterActions","getDelayedEventActions","doneListeners","performTransitionEffects","performEntryEffects","args","debug","console","msg","getState","self","bind","sendParent","sendChild","stopChild","spawn","stopActivity","getAction","getGuard","Symbol","toStringTag","getHydrationState","createMachine","isMachine","clsx","str","trim","filter","join","CSS_REGEX","serialize","style","res","match","css","a","b","assign","mergeProps","result","props","startsWith"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@zag-js/core/dist/index.mjs"],"sourcesContent":["import { clone, snapshot, proxy, proxyWithComputed, subscribe, ref } from '@zag-js/store';\nexport { proxy, ref, snapshot, subscribe } from '@zag-js/store';\nimport { compact, isPlainObject, uuid, cast, callAll, isString, isFunction, noop, isObject, runIfFn, invariant, clear, isArray, hasProp, warn, isDev, isNumber } from '@zag-js/utils';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nfunction deepMerge(source, ...objects) {\n  for (const obj of objects) {\n    const target = compact(obj);\n    for (const key in target) {\n      if (isPlainObject(obj[key])) {\n        if (!source[key]) {\n          source[key] = {};\n        }\n        deepMerge(source[key], obj[key]);\n      } else {\n        source[key] = obj[key];\n      }\n    }\n  }\n  return source;\n}\nfunction toEvent(event) {\n  const obj = isString(event) ? { type: event } : event;\n  return obj;\n}\nfunction toArray(value) {\n  if (!value) return [];\n  return isArray(value) ? value.slice() : [value];\n}\nfunction isGuardHelper(value) {\n  return isObject(value) && value.predicate != null;\n}\n\n// src/guard-utils.ts\nvar Truthy = () => true;\nfunction exec(guardMap, ctx, event, meta) {\n  return (guard) => {\n    if (isString(guard)) {\n      return !!guardMap[guard]?.(ctx, event, meta);\n    }\n    if (isFunction(guard)) {\n      return guard(ctx, event, meta);\n    }\n    return guard.predicate(guardMap)(ctx, event, meta);\n  };\n}\nfunction or(...conditions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).some(Boolean)\n  };\n}\nfunction and(...conditions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => conditions.map(exec(guardMap, ctx, event, meta)).every(Boolean)\n  };\n}\nfunction not(condition) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => {\n      return !exec(guardMap, ctx, event, meta)(condition);\n    }\n  };\n}\nfunction stateIn(...values) {\n  return (_ctx, _evt, meta) => meta.state.matches(...values);\n}\nvar guards = { or, and, not, stateIn };\nfunction choose(actions) {\n  return {\n    predicate: (guardMap) => (ctx, event, meta) => actions.find((def) => {\n      const guard = def.guard ?? Truthy;\n      return exec(guardMap, ctx, event, meta)(guard);\n    })?.actions\n  };\n}\nfunction determineGuardFn(guard, guardMap) {\n  guard = guard ?? Truthy;\n  return (context, event, meta) => {\n    if (isString(guard)) {\n      const value = guardMap[guard];\n      return isFunction(value) ? value(context, event, meta) : value;\n    }\n    if (isGuardHelper(guard)) {\n      return guard.predicate(guardMap)(context, event, meta);\n    }\n    return guard?.(context, event, meta);\n  };\n}\nfunction determineActionsFn(values, guardMap) {\n  return (context, event, meta) => {\n    if (isGuardHelper(values)) {\n      return values.predicate(guardMap)(context, event, meta);\n    }\n    return values;\n  };\n}\nfunction createProxy(config) {\n  const computedContext = config.computed ?? cast({});\n  const initialContext = config.context ?? cast({});\n  const initialTags = config.initial ? config.states?.[config.initial]?.tags : [];\n  const state = proxy({\n    value: config.initial ?? \"\",\n    previousValue: \"\",\n    event: cast({}),\n    previousEvent: cast({}),\n    context: proxyWithComputed(initialContext, computedContext),\n    done: false,\n    tags: initialTags ?? [],\n    hasTag(tag) {\n      return this.tags.includes(tag);\n    },\n    matches(...value) {\n      return value.includes(this.value);\n    },\n    can(event) {\n      return cast(this).nextEvents.includes(event);\n    },\n    get nextEvents() {\n      const stateEvents = config.states?.[this.value]?.[\"on\"] ?? {};\n      const globalEvents = config?.on ?? {};\n      return Object.keys({ ...stateEvents, ...globalEvents });\n    },\n    get changed() {\n      if (this.event.value === \"machine.init\" /* Init */ || !this.previousValue) return false;\n      return this.value !== this.previousValue;\n    }\n  });\n  return cast(state);\n}\nfunction determineDelayFn(delay, delaysMap) {\n  return (context, event) => {\n    if (isNumber(delay)) return delay;\n    if (isFunction(delay)) {\n      return delay(context, event);\n    }\n    if (isString(delay)) {\n      const value = Number.parseFloat(delay);\n      if (!Number.isNaN(value)) {\n        return value;\n      }\n      if (delaysMap) {\n        const valueOrFn = delaysMap?.[delay];\n        invariant(\n          valueOrFn == null,\n          `[@zag-js/core > determine-delay] Cannot determine delay for \\`${delay}\\`. It doesn't exist in \\`options.delays\\``\n        );\n        return isFunction(valueOrFn) ? valueOrFn(context, event) : valueOrFn;\n      }\n    }\n  };\n}\nfunction toTarget(target) {\n  return isString(target) ? { target } : target;\n}\nfunction determineTransitionFn(transitions, guardMap) {\n  return (context, event, meta) => {\n    return toArray(transitions).map(toTarget).find((transition) => {\n      const determineGuard = determineGuardFn(transition.guard, guardMap);\n      const guard = determineGuard(context, event, meta);\n      return guard ?? transition.target ?? transition.actions;\n    });\n  };\n}\n\n// src/machine.ts\nvar Machine = class {\n  // Let's get started!\n  constructor(config, options) {\n    __publicField(this, \"status\", \"Not Started\" /* NotStarted */);\n    __publicField(this, \"state\");\n    __publicField(this, \"initialState\");\n    __publicField(this, \"initialContext\");\n    __publicField(this, \"id\");\n    __publicField(this, \"type\", \"machine\" /* Machine */);\n    // Cleanup function map (per state)\n    __publicField(this, \"activityEvents\", /* @__PURE__ */ new Map());\n    __publicField(this, \"delayedEvents\", /* @__PURE__ */ new Map());\n    // state update listeners the user can opt-in for\n    __publicField(this, \"stateListeners\", /* @__PURE__ */ new Set());\n    __publicField(this, \"doneListeners\", /* @__PURE__ */ new Set());\n    __publicField(this, \"contextWatchers\", /* @__PURE__ */ new Set());\n    // Cleanup functions (for `subscribe`)\n    __publicField(this, \"removeStateListener\", noop);\n    // For Parent <==> Spawned Actor relationship\n    __publicField(this, \"parent\");\n    __publicField(this, \"children\", /* @__PURE__ */ new Map());\n    // A map of guard, action, delay implementations\n    __publicField(this, \"guardMap\");\n    __publicField(this, \"actionMap\");\n    __publicField(this, \"delayMap\");\n    __publicField(this, \"activityMap\");\n    __publicField(this, \"sync\");\n    __publicField(this, \"options\");\n    __publicField(this, \"config\");\n    // created actions\n    __publicField(this, \"_created\", () => {\n      if (!this.config.created) return;\n      const event = toEvent(\"machine.created\" /* Created */);\n      this.executeActions(this.config.created, event);\n    });\n    // Starts the interpreted machine.\n    __publicField(this, \"start\", (init) => {\n      this.state.value = \"\";\n      this.state.tags = [];\n      if (this.status === \"Running\" /* Running */) {\n        return this;\n      }\n      this.status = \"Running\" /* Running */;\n      this.removeStateListener = subscribe(\n        this.state,\n        () => {\n          this.stateListeners.forEach((listener) => {\n            listener(this.stateSnapshot);\n          });\n        },\n        this.sync\n      );\n      this.setupContextWatchers();\n      this.executeActivities(toEvent(\"machine.start\" /* Start */), toArray(this.config.activities), \"machine.start\" /* Start */);\n      this.executeActions(this.config.entry, toEvent(\"machine.start\" /* Start */));\n      const event = toEvent(\"machine.init\" /* Init */);\n      const target = isObject(init) ? init.value : init;\n      const context = isObject(init) ? init.context : void 0;\n      if (context) {\n        this.setContext(context);\n      }\n      const transition = {\n        target: target ?? this.config.initial\n      };\n      const next = this.getNextStateInfo(transition, event);\n      this.initialState = next;\n      this.performStateChangeEffects(this.state.value, next, event);\n      return this;\n    });\n    __publicField(this, \"setupContextWatchers\", () => {\n      const { watch } = this.config;\n      if (!watch) return;\n      let prev = snapshot(this.state.context);\n      const cleanup = subscribe(this.state.context, () => {\n        const next = snapshot(this.state.context);\n        for (const [key, fn] of Object.entries(watch)) {\n          const isEqual = this.options.compareFns?.[key] ?? Object.is;\n          if (isEqual(prev[key], next[key])) continue;\n          this.executeActions(fn, this.state.event);\n        }\n        prev = next;\n      });\n      this.contextWatchers.add(cleanup);\n    });\n    // Stops the interpreted machine\n    __publicField(this, \"stop\", () => {\n      if (this.status === \"Stopped\" /* Stopped */) return;\n      this.performExitEffects(this.state.value, toEvent(\"machine.stop\" /* Stop */));\n      this.executeActions(this.config.exit, toEvent(\"machine.stop\" /* Stop */));\n      this.setState(\"\");\n      this.setEvent(\"machine.stop\" /* Stop */);\n      this.stopStateListeners();\n      this.stopChildren();\n      this.stopActivities();\n      this.stopDelayedEvents();\n      this.stopContextWatchers();\n      this.status = \"Stopped\" /* Stopped */;\n      return this;\n    });\n    __publicField(this, \"stopStateListeners\", () => {\n      this.removeStateListener();\n      this.stateListeners.clear();\n    });\n    __publicField(this, \"stopContextWatchers\", () => {\n      this.contextWatchers.forEach((fn) => fn());\n      this.contextWatchers.clear();\n    });\n    __publicField(this, \"stopDelayedEvents\", () => {\n      this.delayedEvents.forEach((state) => {\n        state.forEach((stop) => stop());\n      });\n      this.delayedEvents.clear();\n    });\n    // Cleanup running activities (e.g `setInterval`, invoked callbacks, promises)\n    __publicField(this, \"stopActivities\", (state) => {\n      if (state) {\n        this.activityEvents.get(state)?.forEach((stop) => stop());\n        this.activityEvents.get(state)?.clear();\n        this.activityEvents.delete(state);\n      } else {\n        this.activityEvents.forEach((state2) => {\n          state2.forEach((stop) => stop());\n          state2.clear();\n        });\n        this.activityEvents.clear();\n      }\n    });\n    /**\n     * Function to send event to spawned child machine or actor\n     */\n    __publicField(this, \"sendChild\", (evt, to) => {\n      const event = toEvent(evt);\n      const id = runIfFn(to, this.contextSnapshot);\n      const child = this.children.get(id);\n      if (!child) {\n        invariant(`[@zag-js/core] Cannot send '${event.type}' event to unknown child`);\n      }\n      child.send(event);\n    });\n    /**\n     * Function to stop a running child machine or actor\n     */\n    __publicField(this, \"stopChild\", (id) => {\n      if (!this.children.has(id)) {\n        invariant(`[@zag-js/core > stop-child] Cannot stop unknown child ${id}`);\n      }\n      this.children.get(id).stop();\n      this.children.delete(id);\n    });\n    __publicField(this, \"removeChild\", (id) => {\n      this.children.delete(id);\n    });\n    // Stop and delete spawned actors\n    __publicField(this, \"stopChildren\", () => {\n      this.children.forEach((child) => child.stop());\n      this.children.clear();\n    });\n    __publicField(this, \"setParent\", (parent) => {\n      this.parent = parent;\n    });\n    __publicField(this, \"spawn\", (src, id) => {\n      const actor = runIfFn(src);\n      if (id) actor.id = id;\n      actor.type = \"machine.actor\" /* Actor */;\n      actor.setParent(this);\n      this.children.set(actor.id, cast(actor));\n      actor.onDone(() => {\n        this.removeChild(actor.id);\n      }).start();\n      return cast(ref(actor));\n    });\n    __publicField(this, \"stopActivity\", (key) => {\n      if (!this.state.value) return;\n      const cleanups = this.activityEvents.get(this.state.value);\n      cleanups?.get(key)?.();\n      cleanups?.delete(key);\n    });\n    __publicField(this, \"addActivityCleanup\", (state, key, cleanup) => {\n      if (!state) return;\n      if (!this.activityEvents.has(state)) {\n        this.activityEvents.set(state, /* @__PURE__ */ new Map([[key, cleanup]]));\n      } else {\n        this.activityEvents.get(state)?.set(key, cleanup);\n      }\n    });\n    __publicField(this, \"setState\", (target) => {\n      this.state.previousValue = this.state.value;\n      this.state.value = target;\n      const stateNode = this.getStateNode(target);\n      if (target == null) {\n        clear(this.state.tags);\n      } else {\n        this.state.tags = toArray(stateNode?.tags);\n      }\n    });\n    /**\n     * To used within side effects for React or Vue to update context\n     */\n    __publicField(this, \"setContext\", (context) => {\n      if (!context) return;\n      deepMerge(this.state.context, compact(context));\n    });\n    __publicField(this, \"setOptions\", (options) => {\n      const opts = compact(options);\n      this.actionMap = { ...this.actionMap, ...opts.actions };\n      this.delayMap = { ...this.delayMap, ...opts.delays };\n      this.activityMap = { ...this.activityMap, ...opts.activities };\n      this.guardMap = { ...this.guardMap, ...opts.guards };\n    });\n    __publicField(this, \"getStateNode\", (state) => {\n      if (!state) return;\n      return this.config.states?.[state];\n    });\n    __publicField(this, \"getNextStateInfo\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      const isTargetless = !transition?.target;\n      const target = transition?.target ?? this.state.value;\n      const changed = this.state.value !== target;\n      const stateNode = this.getStateNode(target);\n      const reenter = !isTargetless && !changed && !transition?.internal;\n      const info = {\n        reenter,\n        transition,\n        stateNode,\n        target,\n        changed\n      };\n      this.log(\"NextState:\", `[${event.type}]`, this.state.value, \"---->\", info.target);\n      return info;\n    });\n    __publicField(this, \"getAfterActions\", (transition, delay) => {\n      let id;\n      const current = this.state.value;\n      return {\n        entry: () => {\n          id = globalThis.setTimeout(() => {\n            const next = this.getNextStateInfo(transition, this.state.event);\n            this.performStateChangeEffects(current, next, this.state.event);\n          }, delay);\n        },\n        exit: () => {\n          globalThis.clearTimeout(id);\n        }\n      };\n    });\n    /**\n     * All `after` events leverage `setTimeout` and `clearTimeout`,\n     * we invoke the `clearTimeout` on exit and `setTimeout` on entry.\n     *\n     * To achieve this, we split the `after` definition into `entry` and `exit`\n     *  functions and append them to the state's `entry` and `exit` actions\n     */\n    __publicField(this, \"getDelayedEventActions\", (state) => {\n      const stateNode = this.getStateNode(state);\n      const event = this.state.event;\n      if (!stateNode || !stateNode.after) return;\n      const entries = [];\n      const exits = [];\n      if (isArray(stateNode.after)) {\n        const transition = this.determineTransition(stateNode.after, event);\n        if (!transition) return;\n        if (!hasProp(transition, \"delay\")) {\n          throw new Error(`[@zag-js/core > after] Delay is required for after transition: ${JSON.stringify(transition)}`);\n        }\n        const determineDelay = determineDelayFn(transition.delay, this.delayMap);\n        const __delay = determineDelay(this.contextSnapshot, event);\n        const actions = this.getAfterActions(transition, __delay);\n        entries.push(actions.entry);\n        exits.push(actions.exit);\n        return { entries, exits };\n      }\n      if (isObject(stateNode.after)) {\n        for (const delay in stateNode.after) {\n          const transition = stateNode.after[delay];\n          const determineDelay = determineDelayFn(delay, this.delayMap);\n          const __delay = determineDelay(this.contextSnapshot, event);\n          const actions = this.getAfterActions(transition, __delay);\n          entries.push(actions.entry);\n          exits.push(actions.exit);\n        }\n      }\n      return { entries, exits };\n    });\n    /**\n     * Function to executes defined actions. It can accept actions as string\n     * (referencing `options.actions`) or actual functions.\n     */\n    __publicField(this, \"executeActions\", (actions, event) => {\n      const pickedActions = determineActionsFn(actions, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      for (const action of toArray(pickedActions)) {\n        const fn = isString(action) ? this.actionMap?.[action] : action;\n        warn(\n          isString(action) && !fn,\n          `[@zag-js/core > execute-actions] No implementation found for action: \\`${action}\\``\n        );\n        fn?.(this.state.context, event, this.meta);\n      }\n    });\n    /**\n     * Function to execute running activities and registers\n     * their cleanup function internally (to be called later on when we exit the state)\n     */\n    __publicField(this, \"executeActivities\", (event, activities, state) => {\n      for (const activity of activities) {\n        const fn = isString(activity) ? this.activityMap?.[activity] : activity;\n        if (!fn) {\n          warn(`[@zag-js/core > execute-activity] No implementation found for activity: \\`${activity}\\``);\n          continue;\n        }\n        const cleanup = fn(this.state.context, event, this.meta);\n        if (cleanup) {\n          const key = isString(activity) ? activity : activity.name || uuid();\n          this.addActivityCleanup(state ?? this.state.value, key, cleanup);\n        }\n      }\n    });\n    /**\n     * Normalizes the `every` definition to transition. `every` can be:\n     * - An array of possible actions to run (we need to pick the first match based on guard)\n     * - An object of intervals and actions\n     */\n    __publicField(this, \"createEveryActivities\", (every, callbackfn) => {\n      if (!every) return;\n      if (isArray(every)) {\n        const picked = toArray(every).find((transition) => {\n          const delayOrFn = transition.delay;\n          const determineDelay2 = determineDelayFn(delayOrFn, this.delayMap);\n          const delay2 = determineDelay2(this.contextSnapshot, this.state.event);\n          const determineGuard = determineGuardFn(transition.guard, this.guardMap);\n          const guard = determineGuard(this.contextSnapshot, this.state.event, this.guardMeta);\n          return guard ?? delay2 != null;\n        });\n        if (!picked) return;\n        const determineDelay = determineDelayFn(picked.delay, this.delayMap);\n        const delay = determineDelay(this.contextSnapshot, this.state.event);\n        const activity = () => {\n          const id = globalThis.setInterval(() => {\n            this.executeActions(picked.actions, this.state.event);\n          }, delay);\n          return () => {\n            globalThis.clearInterval(id);\n          };\n        };\n        callbackfn(activity);\n      } else {\n        for (const interval in every) {\n          const actions = every?.[interval];\n          const determineDelay = determineDelayFn(interval, this.delayMap);\n          const delay = determineDelay(this.contextSnapshot, this.state.event);\n          const activity = () => {\n            const id = globalThis.setInterval(() => {\n              this.executeActions(actions, this.state.event);\n            }, delay);\n            return () => {\n              globalThis.clearInterval(id);\n            };\n          };\n          callbackfn(activity);\n        }\n      }\n    });\n    __publicField(this, \"setEvent\", (event) => {\n      this.state.previousEvent = this.state.event;\n      this.state.event = ref(toEvent(event));\n    });\n    __publicField(this, \"performExitEffects\", (current, event) => {\n      const currentState = this.state.value;\n      if (currentState === \"\") return;\n      const stateNode = current ? this.getStateNode(current) : void 0;\n      this.stopActivities(currentState);\n      const _exit = determineActionsFn(stateNode?.exit, this.guardMap)(this.contextSnapshot, event, this.guardMeta);\n      const exitActions = toArray(_exit);\n      const afterExitActions = this.delayedEvents.get(currentState);\n      if (afterExitActions) {\n        exitActions.push(...afterExitActions);\n      }\n      this.executeActions(exitActions, event);\n      this.delayedEvents.delete(currentState);\n    });\n    __publicField(this, \"performEntryEffects\", (next, event) => {\n      const stateNode = this.getStateNode(next);\n      const activities = toArray(stateNode?.activities);\n      this.createEveryActivities(stateNode?.every, (activity) => {\n        activities.unshift(activity);\n      });\n      if (activities.length > 0) {\n        this.executeActivities(event, activities);\n      }\n      const pickedActions = determineActionsFn(stateNode?.entry, this.guardMap)(\n        this.contextSnapshot,\n        event,\n        this.guardMeta\n      );\n      const entryActions = toArray(pickedActions);\n      const afterActions = this.getDelayedEventActions(next);\n      if (stateNode?.after && afterActions) {\n        this.delayedEvents.set(next, afterActions?.exits);\n        entryActions.push(...afterActions.entries);\n      }\n      this.executeActions(entryActions, event);\n      if (stateNode?.type === \"final\") {\n        this.state.done = true;\n        this.doneListeners.forEach((listener) => {\n          listener(this.stateSnapshot);\n        });\n        this.stop();\n      }\n    });\n    __publicField(this, \"performTransitionEffects\", (transitions, event) => {\n      const transition = this.determineTransition(transitions, event);\n      this.executeActions(transition?.actions, event);\n    });\n    /**\n     * Performs all the requires side-effects or reactions when\n     * we move from state A => state B.\n     *\n     * The Effect order:\n     * Exit actions (current state) => Transition actions  => Go to state => Entry actions (next state)\n     */\n    __publicField(this, \"performStateChangeEffects\", (current, next, event) => {\n      this.setEvent(event);\n      const changed = next.changed || next.reenter;\n      if (changed) {\n        this.performExitEffects(current, event);\n      }\n      this.performTransitionEffects(next.transition, event);\n      this.setState(next.target);\n      if (changed) {\n        this.performEntryEffects(next.target, event);\n      }\n    });\n    __publicField(this, \"determineTransition\", (transition, event) => {\n      const fn = determineTransitionFn(transition, this.guardMap);\n      return fn?.(this.contextSnapshot, event, this.guardMeta);\n    });\n    /**\n     * Function to send event to parent machine from spawned child\n     */\n    __publicField(this, \"sendParent\", (evt) => {\n      if (!this.parent) {\n        invariant(\"[@zag-js/core > send-parent] Cannot send event to an unknown parent\");\n      }\n      const event = toEvent(evt);\n      this.parent?.send(event);\n    });\n    __publicField(this, \"log\", (...args) => {\n      if (isDev() && this.options.debug) {\n        console.log(...args);\n      }\n    });\n    /**\n     * Function to send an event to current machine\n     */\n    __publicField(this, \"send\", (evt) => {\n      const event = toEvent(evt);\n      this.transition(this.state.value, event);\n    });\n    __publicField(this, \"transition\", (state, evt) => {\n      const stateNode = isString(state) ? this.getStateNode(state) : state?.stateNode;\n      const event = toEvent(evt);\n      if (!stateNode && !this.config.on) {\n        const msg = this.status === \"Stopped\" /* Stopped */ ? \"[@zag-js/core > transition] Cannot transition a stopped machine\" : `[@zag-js/core > transition] State does not have a definition for \\`state\\`: ${state}, \\`event\\`: ${event.type}`;\n        warn(msg);\n        return;\n      }\n      const transitions = (\n        // @ts-expect-error - Fix this\n        stateNode?.on?.[event.type] ?? this.config.on?.[event.type]\n      );\n      const next = this.getNextStateInfo(transitions, event);\n      this.performStateChangeEffects(this.state.value, next, event);\n      return next.stateNode;\n    });\n    __publicField(this, \"subscribe\", (listener) => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return () => {\n        this.stateListeners.delete(listener);\n      };\n    });\n    __publicField(this, \"onDone\", (listener) => {\n      this.doneListeners.add(listener);\n      return this;\n    });\n    __publicField(this, \"onTransition\", (listener) => {\n      this.stateListeners.add(listener);\n      if (this.status === \"Running\" /* Running */) {\n        listener(this.stateSnapshot);\n      }\n      return this;\n    });\n    this.config = clone(config);\n    this.options = clone(options ?? {});\n    this.id = this.config.id ?? `machine-${uuid()}`;\n    this.guardMap = this.options?.guards ?? {};\n    this.actionMap = this.options?.actions ?? {};\n    this.delayMap = this.options?.delays ?? {};\n    this.activityMap = this.options?.activities ?? {};\n    this.sync = this.options?.sync ?? false;\n    this.state = createProxy(this.config);\n    this.initialContext = snapshot(this.state.context);\n  }\n  // immutable state value\n  get stateSnapshot() {\n    return cast(snapshot(this.state));\n  }\n  getState() {\n    return this.stateSnapshot;\n  }\n  // immutable context value\n  get contextSnapshot() {\n    return this.stateSnapshot.context;\n  }\n  /**\n   * A reference to the instance methods of the machine.\n   * Useful when spawning child machines and managing the communication between them.\n   */\n  get self() {\n    const self = this;\n    return {\n      id: this.id,\n      send: this.send.bind(this),\n      sendParent: this.sendParent.bind(this),\n      sendChild: this.sendChild.bind(this),\n      stop: this.stop.bind(this),\n      stopChild: this.stopChild.bind(this),\n      spawn: this.spawn.bind(this),\n      stopActivity: this.stopActivity.bind(this),\n      get state() {\n        return self.stateSnapshot;\n      },\n      get initialContext() {\n        return self.initialContext;\n      },\n      get initialState() {\n        return self.initialState?.target ?? \"\";\n      }\n    };\n  }\n  get meta() {\n    return {\n      state: this.stateSnapshot,\n      guards: this.guardMap,\n      send: this.send.bind(this),\n      self: this.self,\n      initialContext: this.initialContext,\n      initialState: this.initialState?.target ?? \"\",\n      getState: () => this.stateSnapshot,\n      getAction: (key) => this.actionMap[key],\n      getGuard: (key) => this.guardMap[key]\n    };\n  }\n  get guardMeta() {\n    return {\n      state: this.stateSnapshot\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return \"Machine\";\n  }\n  getHydrationState() {\n    const state = this.getState();\n    return {\n      value: state.value,\n      tags: state.tags\n    };\n  }\n};\nvar createMachine = (config, options) => new Machine(config, options);\nvar isMachine = (value) => {\n  return value instanceof Machine || value?.type === \"machine\" /* Machine */;\n};\nvar clsx = (...args) => args.map((str) => str?.trim?.()).filter(Boolean).join(\" \");\nvar CSS_REGEX = /((?:--)?(?:\\w+-?)+)\\s*:\\s*([^;]*)/g;\nvar serialize = (style) => {\n  const res = {};\n  let match;\n  while (match = CSS_REGEX.exec(style)) {\n    res[match[1]] = match[2];\n  }\n  return res;\n};\nvar css = (a, b) => {\n  if (isString(a)) {\n    if (isString(b)) return `${a};${b}`;\n    a = serialize(a);\n  } else if (isString(b)) {\n    b = serialize(b);\n  }\n  return Object.assign({}, a ?? {}, b ?? {});\n};\nfunction mergeProps(...args) {\n  let result = {};\n  for (let props of args) {\n    for (let key in result) {\n      if (key.startsWith(\"on\") && typeof result[key] === \"function\" && typeof props[key] === \"function\") {\n        result[key] = callAll(props[key], result[key]);\n        continue;\n      }\n      if (key === \"className\" || key === \"class\") {\n        result[key] = clsx(result[key], props[key]);\n        continue;\n      }\n      if (key === \"style\") {\n        result[key] = css(result[key], props[key]);\n        continue;\n      }\n      result[key] = props[key] !== void 0 ? props[key] : result[key];\n    }\n    for (let key in props) {\n      if (result[key] === void 0) {\n        result[key] = props[key];\n      }\n    }\n  }\n  return result;\n}\n\nexport { Machine, choose, createMachine, deepMerge, guards, isMachine, mergeProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}