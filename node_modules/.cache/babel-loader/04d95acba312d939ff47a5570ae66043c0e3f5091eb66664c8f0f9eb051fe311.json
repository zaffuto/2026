{"ast":null,"code":"\"use strict\";\n\nimport { isString } from '../utils/is.js';\nconst REFERENCE_REGEX = /({([^}]*)})/g;\nconst CURLY_REGEX = /[{}]/g;\nconst TOKEN_PATH_REGEX = /\\w+\\.\\w+/;\nconst getReferences = value => {\n  if (!isString(value)) return [];\n  const matches = value.match(REFERENCE_REGEX);\n  if (!matches) return [];\n  return matches.map(match => match.replace(CURLY_REGEX, \"\")).map(value2 => value2.trim());\n};\nconst hasReference = value => REFERENCE_REGEX.test(value);\nfunction expandReferences(token) {\n  if (!token.extensions?.references) {\n    return token.extensions?.cssVar?.ref ?? token.value;\n  }\n  const references = token.extensions.references ?? {};\n  token.value = Object.keys(references).reduce((valueStr, key) => {\n    const referenceToken = references[key];\n    if (referenceToken.extensions.conditions) {\n      return valueStr;\n    }\n    const value = expandReferences(referenceToken);\n    return valueStr.replace(`{${key}}`, value);\n  }, token.value);\n  delete token.extensions.references;\n  return token.value;\n}\nexport { TOKEN_PATH_REGEX, expandReferences, getReferences, hasReference };","map":{"version":3,"names":["isString","REFERENCE_REGEX","CURLY_REGEX","TOKEN_PATH_REGEX","getReferences","value","matches","match","map","replace","value2","trim","hasReference","test","expandReferences","token","extensions","references","cssVar","ref","Object","keys","reduce","valueStr","key","referenceToken","conditions"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@chakra-ui/react/dist/esm/styled-system/references.js"],"sourcesContent":["\"use strict\";\nimport { isString } from '../utils/is.js';\n\nconst REFERENCE_REGEX = /({([^}]*)})/g;\nconst CURLY_REGEX = /[{}]/g;\nconst TOKEN_PATH_REGEX = /\\w+\\.\\w+/;\nconst getReferences = (value) => {\n  if (!isString(value)) return [];\n  const matches = value.match(REFERENCE_REGEX);\n  if (!matches) return [];\n  return matches.map((match) => match.replace(CURLY_REGEX, \"\")).map((value2) => value2.trim());\n};\nconst hasReference = (value) => REFERENCE_REGEX.test(value);\nfunction expandReferences(token) {\n  if (!token.extensions?.references) {\n    return token.extensions?.cssVar?.ref ?? token.value;\n  }\n  const references = token.extensions.references ?? {};\n  token.value = Object.keys(references).reduce((valueStr, key) => {\n    const referenceToken = references[key];\n    if (referenceToken.extensions.conditions) {\n      return valueStr;\n    }\n    const value = expandReferences(referenceToken);\n    return valueStr.replace(`{${key}}`, value);\n  }, token.value);\n  delete token.extensions.references;\n  return token.value;\n}\n\nexport { TOKEN_PATH_REGEX, expandReferences, getReferences, hasReference };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,QAAQ,QAAQ,gBAAgB;AAEzC,MAAMC,eAAe,GAAG,cAAc;AACtC,MAAMC,WAAW,GAAG,OAAO;AAC3B,MAAMC,gBAAgB,GAAG,UAAU;AACnC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC/B,IAAI,CAACL,QAAQ,CAACK,KAAK,CAAC,EAAE,OAAO,EAAE;EAC/B,MAAMC,OAAO,GAAGD,KAAK,CAACE,KAAK,CAACN,eAAe,CAAC;EAC5C,IAAI,CAACK,OAAO,EAAE,OAAO,EAAE;EACvB,OAAOA,OAAO,CAACE,GAAG,CAAED,KAAK,IAAKA,KAAK,CAACE,OAAO,CAACP,WAAW,EAAE,EAAE,CAAC,CAAC,CAACM,GAAG,CAAEE,MAAM,IAAKA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;AAC9F,CAAC;AACD,MAAMC,YAAY,GAAIP,KAAK,IAAKJ,eAAe,CAACY,IAAI,CAACR,KAAK,CAAC;AAC3D,SAASS,gBAAgBA,CAACC,KAAK,EAAE;EAC/B,IAAI,CAACA,KAAK,CAACC,UAAU,EAAEC,UAAU,EAAE;IACjC,OAAOF,KAAK,CAACC,UAAU,EAAEE,MAAM,EAAEC,GAAG,IAAIJ,KAAK,CAACV,KAAK;EACrD;EACA,MAAMY,UAAU,GAAGF,KAAK,CAACC,UAAU,CAACC,UAAU,IAAI,CAAC,CAAC;EACpDF,KAAK,CAACV,KAAK,GAAGe,MAAM,CAACC,IAAI,CAACJ,UAAU,CAAC,CAACK,MAAM,CAAC,CAACC,QAAQ,EAAEC,GAAG,KAAK;IAC9D,MAAMC,cAAc,GAAGR,UAAU,CAACO,GAAG,CAAC;IACtC,IAAIC,cAAc,CAACT,UAAU,CAACU,UAAU,EAAE;MACxC,OAAOH,QAAQ;IACjB;IACA,MAAMlB,KAAK,GAAGS,gBAAgB,CAACW,cAAc,CAAC;IAC9C,OAAOF,QAAQ,CAACd,OAAO,CAAC,IAAIe,GAAG,GAAG,EAAEnB,KAAK,CAAC;EAC5C,CAAC,EAAEU,KAAK,CAACV,KAAK,CAAC;EACf,OAAOU,KAAK,CAACC,UAAU,CAACC,UAAU;EAClC,OAAOF,KAAK,CAACV,KAAK;AACpB;AAEA,SAASF,gBAAgB,EAAEW,gBAAgB,EAAEV,aAAa,EAAEQ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}