{"ast":null,"code":"\"use strict\";\n\nimport { isString, isFunction } from '../utils/is.js';\nimport { memo } from '../utils/memo.js';\nimport { colorMix } from './color-mix.js';\nimport { mapToJson } from './map-to-json.js';\nfunction normalize(config) {\n  return config;\n}\nfunction normalizeConfig(config) {\n  return Object.fromEntries(Object.entries(config).map(([property, propertyConfig]) => {\n    return [property, normalize(propertyConfig)];\n  }));\n}\nfunction createUtility(options) {\n  const configs = normalizeConfig(options.config);\n  const tokens = options.tokens;\n  const shorthands = /* @__PURE__ */new Map();\n  const propValues = /* @__PURE__ */new Map();\n  function register(property, config) {\n    configs[property] = normalize(config);\n    assignProperty(property, config);\n  }\n  const assignProperty = (property, config) => {\n    const values = getPropertyValues(config);\n    if (!values) return;\n    propValues.set(property, values);\n    assignPropertyType(property, config);\n  };\n  const assignProperties = () => {\n    for (const [prop, config] of Object.entries(configs)) {\n      if (!config) continue;\n      assignProperty(prop, config);\n    }\n  };\n  const assignShorthands = () => {\n    for (const [property, config] of Object.entries(configs)) {\n      const {\n        shorthand\n      } = config ?? {};\n      if (!shorthand) continue;\n      const values = Array.isArray(shorthand) ? shorthand : [shorthand];\n      values.forEach(name => shorthands.set(name, property));\n    }\n  };\n  const assignColorPaletteProperty = () => {\n    const values = mapToJson(tokens.colorPaletteMap);\n    register(\"colorPalette\", {\n      values: Object.keys(values),\n      transform: memo(value => values[value])\n    });\n  };\n  const propTypes = /* @__PURE__ */new Map();\n  const assignPropertyType = (property, config) => {\n    if (!config) return;\n    const values = getPropertyValues(config, key => `type:Tokens[\"${key}\"]`);\n    if (typeof values === \"object\" && values.type) {\n      propTypes.set(property, /* @__PURE__ */new Set([`type:${values.type}`]));\n      return;\n    }\n    if (values) {\n      const keys2 = new Set(Object.keys(values));\n      propTypes.set(property, keys2);\n    }\n    const set = propTypes.get(property) ?? /* @__PURE__ */new Set();\n    if (config.property) {\n      propTypes.set(property, set.add(`CssProperties[\"${config.property}\"]`));\n    }\n  };\n  const assignPropertyTypes = () => {\n    for (const [property, propertyConfig] of Object.entries(configs)) {\n      if (!propertyConfig) continue;\n      assignPropertyType(property, propertyConfig);\n    }\n  };\n  const addPropertyType = (property, type) => {\n    const set = propTypes.get(property) ?? /* @__PURE__ */new Set();\n    propTypes.set(property, /* @__PURE__ */new Set([...set, ...type]));\n  };\n  const getTypes = () => {\n    const map = /* @__PURE__ */new Map();\n    for (const [prop, values] of propTypes.entries()) {\n      if (values.size === 0) {\n        map.set(prop, [\"string\"]);\n        continue;\n      }\n      const typeValues = Array.from(values).map(key => {\n        if (key.startsWith(\"CssProperties\")) return key;\n        if (key.startsWith(\"type:\")) return key.replace(\"type:\", \"\");\n        return JSON.stringify(key);\n      });\n      map.set(prop, typeValues);\n    }\n    return map;\n  };\n  const getPropertyValues = (config, resolveFn) => {\n    const {\n      values\n    } = config;\n    const fn = key => {\n      const value = resolveFn?.(key);\n      return value ? {\n        [value]: value\n      } : void 0;\n    };\n    if (isString(values)) {\n      return fn?.(values) ?? tokens.getCategoryValues(values) ?? {};\n    }\n    if (Array.isArray(values)) {\n      return values.reduce((result, value) => {\n        result[value] = value;\n        return result;\n      }, {});\n    }\n    if (isFunction(values)) {\n      return values(resolveFn ? fn : tokens.getCategoryValues);\n    }\n    return values;\n  };\n  const defaultTransform = memo((prop, value) => {\n    return {\n      [prop]: prop.startsWith(\"--\") ? tokens.getVar(value, value) : value\n    };\n  });\n  const tokenFn = Object.assign(tokens.getVar, {\n    raw: path => tokens.getByName(path)\n  });\n  const transform = memo((prop, raw) => {\n    const key = resolveShorthand(prop);\n    if (isString(raw) && !raw.includes(\"_EMO_\")) {\n      raw = tokens.expandReferenceInValue(raw);\n    }\n    const config = configs[key];\n    if (!config) {\n      return defaultTransform(key, raw);\n    }\n    const value = propValues.get(key)?.[raw];\n    if (!config.transform) {\n      return defaultTransform(prop, value ?? raw);\n    }\n    const _colorMix = value2 => colorMix(value2, tokenFn);\n    return config.transform(value ?? raw, {\n      raw,\n      token: tokenFn,\n      utils: {\n        colorMix: _colorMix\n      }\n    });\n  });\n  function build() {\n    assignShorthands();\n    assignColorPaletteProperty();\n    assignProperties();\n    assignPropertyTypes();\n  }\n  build();\n  const hasShorthand = shorthands.size > 0;\n  const resolveShorthand = memo(prop => {\n    return shorthands.get(prop) ?? prop;\n  });\n  const keys = () => {\n    return [...Array.from(shorthands.keys()), ...Object.keys(configs)];\n  };\n  const instance = {\n    keys,\n    hasShorthand,\n    transform,\n    shorthands,\n    resolveShorthand,\n    register,\n    getTypes,\n    addPropertyType\n  };\n  return instance;\n}\nexport { createUtility };","map":{"version":3,"names":["isString","isFunction","memo","colorMix","mapToJson","normalize","config","normalizeConfig","Object","fromEntries","entries","map","property","propertyConfig","createUtility","options","configs","tokens","shorthands","Map","propValues","register","assignProperty","values","getPropertyValues","set","assignPropertyType","assignProperties","prop","assignShorthands","shorthand","Array","isArray","forEach","name","assignColorPaletteProperty","colorPaletteMap","keys","transform","value","propTypes","key","type","Set","keys2","get","add","assignPropertyTypes","addPropertyType","getTypes","size","typeValues","from","startsWith","replace","JSON","stringify","resolveFn","fn","getCategoryValues","reduce","result","defaultTransform","getVar","tokenFn","assign","raw","path","getByName","resolveShorthand","includes","expandReferenceInValue","_colorMix","value2","token","utils","build","hasShorthand","instance"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@chakra-ui/react/dist/esm/styled-system/utility.js"],"sourcesContent":["\"use strict\";\nimport { isString, isFunction } from '../utils/is.js';\nimport { memo } from '../utils/memo.js';\nimport { colorMix } from './color-mix.js';\nimport { mapToJson } from './map-to-json.js';\n\nfunction normalize(config) {\n  return config;\n}\nfunction normalizeConfig(config) {\n  return Object.fromEntries(\n    Object.entries(config).map(([property, propertyConfig]) => {\n      return [property, normalize(propertyConfig)];\n    })\n  );\n}\nfunction createUtility(options) {\n  const configs = normalizeConfig(options.config);\n  const tokens = options.tokens;\n  const shorthands = /* @__PURE__ */ new Map();\n  const propValues = /* @__PURE__ */ new Map();\n  function register(property, config) {\n    configs[property] = normalize(config);\n    assignProperty(property, config);\n  }\n  const assignProperty = (property, config) => {\n    const values = getPropertyValues(config);\n    if (!values) return;\n    propValues.set(property, values);\n    assignPropertyType(property, config);\n  };\n  const assignProperties = () => {\n    for (const [prop, config] of Object.entries(configs)) {\n      if (!config) continue;\n      assignProperty(prop, config);\n    }\n  };\n  const assignShorthands = () => {\n    for (const [property, config] of Object.entries(configs)) {\n      const { shorthand } = config ?? {};\n      if (!shorthand) continue;\n      const values = Array.isArray(shorthand) ? shorthand : [shorthand];\n      values.forEach((name) => shorthands.set(name, property));\n    }\n  };\n  const assignColorPaletteProperty = () => {\n    const values = mapToJson(tokens.colorPaletteMap);\n    register(\"colorPalette\", {\n      values: Object.keys(values),\n      transform: memo((value) => values[value])\n    });\n  };\n  const propTypes = /* @__PURE__ */ new Map();\n  const assignPropertyType = (property, config) => {\n    if (!config) return;\n    const values = getPropertyValues(config, (key) => `type:Tokens[\"${key}\"]`);\n    if (typeof values === \"object\" && values.type) {\n      propTypes.set(property, /* @__PURE__ */ new Set([`type:${values.type}`]));\n      return;\n    }\n    if (values) {\n      const keys2 = new Set(Object.keys(values));\n      propTypes.set(property, keys2);\n    }\n    const set = propTypes.get(property) ?? /* @__PURE__ */ new Set();\n    if (config.property) {\n      propTypes.set(property, set.add(`CssProperties[\"${config.property}\"]`));\n    }\n  };\n  const assignPropertyTypes = () => {\n    for (const [property, propertyConfig] of Object.entries(configs)) {\n      if (!propertyConfig) continue;\n      assignPropertyType(property, propertyConfig);\n    }\n  };\n  const addPropertyType = (property, type) => {\n    const set = propTypes.get(property) ?? /* @__PURE__ */ new Set();\n    propTypes.set(property, /* @__PURE__ */ new Set([...set, ...type]));\n  };\n  const getTypes = () => {\n    const map = /* @__PURE__ */ new Map();\n    for (const [prop, values] of propTypes.entries()) {\n      if (values.size === 0) {\n        map.set(prop, [\"string\"]);\n        continue;\n      }\n      const typeValues = Array.from(values).map((key) => {\n        if (key.startsWith(\"CssProperties\")) return key;\n        if (key.startsWith(\"type:\")) return key.replace(\"type:\", \"\");\n        return JSON.stringify(key);\n      });\n      map.set(prop, typeValues);\n    }\n    return map;\n  };\n  const getPropertyValues = (config, resolveFn) => {\n    const { values } = config;\n    const fn = (key) => {\n      const value = resolveFn?.(key);\n      return value ? { [value]: value } : void 0;\n    };\n    if (isString(values)) {\n      return fn?.(values) ?? tokens.getCategoryValues(values) ?? {};\n    }\n    if (Array.isArray(values)) {\n      return values.reduce((result, value) => {\n        result[value] = value;\n        return result;\n      }, {});\n    }\n    if (isFunction(values)) {\n      return values(resolveFn ? fn : tokens.getCategoryValues);\n    }\n    return values;\n  };\n  const defaultTransform = memo((prop, value) => {\n    return {\n      [prop]: prop.startsWith(\"--\") ? tokens.getVar(value, value) : value\n    };\n  });\n  const tokenFn = Object.assign(tokens.getVar, {\n    raw: (path) => tokens.getByName(path)\n  });\n  const transform = memo((prop, raw) => {\n    const key = resolveShorthand(prop);\n    if (isString(raw) && !raw.includes(\"_EMO_\")) {\n      raw = tokens.expandReferenceInValue(raw);\n    }\n    const config = configs[key];\n    if (!config) {\n      return defaultTransform(key, raw);\n    }\n    const value = propValues.get(key)?.[raw];\n    if (!config.transform) {\n      return defaultTransform(prop, value ?? raw);\n    }\n    const _colorMix = (value2) => colorMix(value2, tokenFn);\n    return config.transform(value ?? raw, {\n      raw,\n      token: tokenFn,\n      utils: { colorMix: _colorMix }\n    });\n  });\n  function build() {\n    assignShorthands();\n    assignColorPaletteProperty();\n    assignProperties();\n    assignPropertyTypes();\n  }\n  build();\n  const hasShorthand = shorthands.size > 0;\n  const resolveShorthand = memo((prop) => {\n    return shorthands.get(prop) ?? prop;\n  });\n  const keys = () => {\n    return [...Array.from(shorthands.keys()), ...Object.keys(configs)];\n  };\n  const instance = {\n    keys,\n    hasShorthand,\n    transform,\n    shorthands,\n    resolveShorthand,\n    register,\n    getTypes,\n    addPropertyType\n  };\n  return instance;\n}\n\nexport { createUtility };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}