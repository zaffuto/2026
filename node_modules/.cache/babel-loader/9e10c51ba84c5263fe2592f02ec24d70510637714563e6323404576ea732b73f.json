{"ast":null,"code":"'use client';\n\nimport { isObject, arrayToObjectNotation } from '@chakra-ui/utils';\nimport { getClosestValue } from './media-query.utils.mjs';\nimport { useBreakpoint } from './use-breakpoint.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\nfunction useBreakpointValue(values, arg) {\n  var _theme$__breakpoints;\n  const opts = isObject(arg) ? arg : {\n    fallback: arg !== null && arg !== void 0 ? arg : \"base\"\n  };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme();\n  if (!breakpoint) return;\n  const breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) === null || _theme$__breakpoints === void 0 ? void 0 : _theme$__breakpoints.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    let [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\nexport { useBreakpointValue };","map":{"version":3,"names":["isObject","arrayToObjectNotation","getClosestValue","useBreakpoint","useTheme","useBreakpointValue","values","arg","_theme$__breakpoints","opts","fallback","breakpoint","theme","breakpoints","Array","from","__breakpoints","keys","obj","isArray","Object","fromEntries","entries","map","_ref","key","value"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@chakra-ui/react/dist/esm/media-query/use-breakpoint-value.mjs"],"sourcesContent":["'use client';\nimport { isObject, arrayToObjectNotation } from '@chakra-ui/utils';\nimport { getClosestValue } from './media-query.utils.mjs';\nimport { useBreakpoint } from './use-breakpoint.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\n\nfunction useBreakpointValue(values, arg) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme();\n  if (!breakpoint)\n    return;\n  const breakpoints = Array.from(theme.__breakpoints?.keys || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(\n    Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n      ([key, value]) => [key, value]\n    )\n  ) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { useBreakpointValue };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,QAAQ,EAAEC,qBAAqB,QAAQ,kBAAkB;AAClE,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,QAAQ,QAAQ,yBAAyB;AAElD,SAASC,kBAAkBA,CAACC,MAAM,EAAEC,GAAG,EAAE;EAAA,IAAAC,oBAAA;EACvC,MAAMC,IAAI,GAAGT,QAAQ,CAACO,GAAG,CAAC,GAAGA,GAAG,GAAG;IAAEG,QAAQ,EAAEH,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI;EAAO,CAAC;EAC9D,MAAMI,UAAU,GAAGR,aAAa,CAACM,IAAI,CAAC;EACtC,MAAMG,KAAK,GAAGR,QAAQ,CAAC,CAAC;EACxB,IAAI,CAACO,UAAU,EACb;EACF,MAAME,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC,EAAAP,oBAAA,GAAAI,KAAK,CAACI,aAAa,cAAAR,oBAAA,uBAAnBA,oBAAA,CAAqBS,IAAI,KAAI,EAAE,CAAC;EAC/D,MAAMC,GAAG,GAAGJ,KAAK,CAACK,OAAO,CAACb,MAAM,CAAC,GAAGc,MAAM,CAACC,WAAW,CACpDD,MAAM,CAACE,OAAO,CAACrB,qBAAqB,CAACK,MAAM,EAAEO,WAAW,CAAC,CAAC,CAACU,GAAG,CAC5DC,IAAA;IAAA,IAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA;IAAA,OAAK,CAACC,GAAG,EAAEC,KAAK,CAAC;EAAA,CAChC,CACF,CAAC,GAAGpB,MAAM;EACV,OAAOJ,eAAe,CAACgB,GAAG,EAAEP,UAAU,EAAEE,WAAW,CAAC;AACtD;AAEA,SAASR,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}