{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { composeRefs } from '../../utils/compose-refs.js';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { ark } from '../factory.js';\nimport { useField } from './use-field.js';\nimport { FieldProvider } from './use-field-context.js';\nconst FieldRoot = forwardRef((props, ref) => {\n  const [useFieldProps, localProps] = createSplitProps()(props, [\"id\", \"ids\", \"disabled\", \"invalid\", \"readOnly\", \"required\"]);\n  const field = useField(useFieldProps);\n  const mergedProps = mergeProps(field.getRootProps(), localProps);\n  return /* @__PURE__ */jsx(FieldProvider, {\n    value: field,\n    children: /* @__PURE__ */jsx(ark.div, {\n      ...mergedProps,\n      ref: composeRefs(ref, field.refs.rootRef)\n    })\n  });\n});\nFieldRoot.displayName = \"FieldRoot\";\nexport { FieldRoot };","map":{"version":3,"names":["jsx","mergeProps","forwardRef","composeRefs","createSplitProps","ark","useField","FieldProvider","FieldRoot","props","ref","useFieldProps","localProps","field","mergedProps","getRootProps","value","children","div","refs","rootRef","displayName"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@ark-ui/react/dist/components/field/field-root.js"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { composeRefs } from '../../utils/compose-refs.js';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { ark } from '../factory.js';\nimport { useField } from './use-field.js';\nimport { FieldProvider } from './use-field-context.js';\n\nconst FieldRoot = forwardRef((props, ref) => {\n  const [useFieldProps, localProps] = createSplitProps()(props, [\n    \"id\",\n    \"ids\",\n    \"disabled\",\n    \"invalid\",\n    \"readOnly\",\n    \"required\"\n  ]);\n  const field = useField(useFieldProps);\n  const mergedProps = mergeProps(field.getRootProps(), localProps);\n  return /* @__PURE__ */ jsx(FieldProvider, { value: field, children: /* @__PURE__ */ jsx(ark.div, { ...mergedProps, ref: composeRefs(ref, field.refs.rootRef) }) });\n});\nFieldRoot.displayName = \"FieldRoot\";\n\nexport { FieldRoot };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,QAAQ,mBAAmB;AACvC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,GAAG,QAAQ,eAAe;AACnC,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,aAAa,QAAQ,wBAAwB;AAEtD,MAAMC,SAAS,GAAGN,UAAU,CAAC,CAACO,KAAK,EAAEC,GAAG,KAAK;EAC3C,MAAM,CAACC,aAAa,EAAEC,UAAU,CAAC,GAAGR,gBAAgB,CAAC,CAAC,CAACK,KAAK,EAAE,CAC5D,IAAI,EACJ,KAAK,EACL,UAAU,EACV,SAAS,EACT,UAAU,EACV,UAAU,CACX,CAAC;EACF,MAAMI,KAAK,GAAGP,QAAQ,CAACK,aAAa,CAAC;EACrC,MAAMG,WAAW,GAAGb,UAAU,CAACY,KAAK,CAACE,YAAY,CAAC,CAAC,EAAEH,UAAU,CAAC;EAChE,OAAO,eAAgBZ,GAAG,CAACO,aAAa,EAAE;IAAES,KAAK,EAAEH,KAAK;IAAEI,QAAQ,EAAE,eAAgBjB,GAAG,CAACK,GAAG,CAACa,GAAG,EAAE;MAAE,GAAGJ,WAAW;MAAEJ,GAAG,EAAEP,WAAW,CAACO,GAAG,EAAEG,KAAK,CAACM,IAAI,CAACC,OAAO;IAAE,CAAC;EAAE,CAAC,CAAC;AACpK,CAAC,CAAC;AACFZ,SAAS,CAACa,WAAW,GAAG,WAAW;AAEnC,SAASb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}