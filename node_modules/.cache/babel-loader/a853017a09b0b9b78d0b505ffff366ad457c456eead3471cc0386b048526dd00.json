{"ast":null,"code":"import { CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f } from \"./CalendarDate.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);\n}\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n  }\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n    return length;\n  }\n  getMonthsInYear() {\n    return 12;\n  }\n  getDaysInYear(date) {\n    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n  }\n  getYearsInEra() {\n    // 9999 gregorian\n    return 9665;\n  }\n  getEras() {\n    return ['AH'];\n  }\n  constructor() {\n    this.identifier = 'islamic-civil';\n  }\n}\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n  }\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n  constructor(...args) {\n    super(...args), this.identifier = 'islamic-tbla';\n  }\n}\n// Generated by scripts/generate-umalqura.js\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  let mask = 0x01 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n  return day;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {\n      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n    }\n  }\n  toJulianDay(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n  getDaysInMonth(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n  }\n  getDaysInYear(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n  }\n  constructor() {\n    super(), this.identifier = 'islamic-umalqura';\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      let yearStart = 0;\n      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n  }\n}\nexport { $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar };","map":{"version":3,"names":["$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","year","month","day","Math","ceil","floor","$f2f3e0e3a817edbd$var$julianDayToIslamic","calendar","jd","min","$35ea8db9cb2ccb90$export$99faa760c7908e4f","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","fromJulianDay","toJulianDay","date","getDaysInMonth","length","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","identifier","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","args","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","idx","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","days","startDays","endDays","y","m","d","yearLength","monthLength","constructor","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/IslamicCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}