{"ast":null,"code":"import { CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f } from \"./CalendarDate.mjs\";\nimport { mod as $2b4dce13dd5a17fa$export$842a2cf37af977e1 } from \"./utils.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n}\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n  if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n}\n// Check for delay in start of new year due to length of adjacent years\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n    case 354:\n      return 1;\n    // normal\n    case 355:\n      return 2;\n    // complete\n  }\n}\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  let yearType = $7c5f6fbf42389787$var$getYearType(year);\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) return yearType === 2 ? 30 : 29;\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) return yearType === 0 ? 29 : 30;\n  // Adar I only exists in leap years\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n  fromJulianDay(jd) {\n    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = $7c5f6fbf42389787$var$startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      month++;\n    }\n    month--;\n    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n    let day = dayOfYear - monthStart;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n  }\n  toJulianDay(date) {\n    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n  }\n  getDaysInMonth(date) {\n    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n  }\n  getMonthsInYear(date) {\n    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n  }\n  getDaysInYear(date) {\n    return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n  }\n  getYearsInEra() {\n    // 6239 gregorian\n    return 9999;\n  }\n  getEras() {\n    return ['AM'];\n  }\n  balanceYearMonth(date, previousDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n    }\n  }\n  constructor() {\n    this.identifier = 'hebrew';\n  }\n}\nexport { $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar };","map":{"version":3,"names":["$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","year","$2b4dce13dd5a17fa$export$842a2cf37af977e1","$7c5f6fbf42389787$var$hebrewDelay1","months","Math","floor","parts","day","$7c5f6fbf42389787$var$hebrewDelay2","last","present","next","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","yearLength","$7c5f6fbf42389787$var$getDaysInMonth","month","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","fromJulianDay","jd","d","m","ys","dayOfYear","monthStart","$35ea8db9cb2ccb90$export$99faa760c7908e4f","toJulianDay","date","getDaysInMonth","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","balanceYearMonth","previousDate","identifier"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/HebrewCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}