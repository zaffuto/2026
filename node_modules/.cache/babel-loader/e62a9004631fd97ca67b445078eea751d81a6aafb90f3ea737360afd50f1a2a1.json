{"ast":null,"code":"import { fromAbsolute as $11d87f3f76e88657$export$1b96692a1ba042ac, toAbsolute as $11d87f3f76e88657$export$5107c82f94518f5c, toCalendar as $11d87f3f76e88657$export$b4a036af3fc0b032, toCalendarDate as $11d87f3f76e88657$export$93522d1a439f3617 } from \"./conversion.mjs\";\nimport { weekStartData as $2fe286d2fb449abb$export$7a5acbd77d414bd9 } from \"./weekStartData.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\nconst $14e0f24ef4ac5c92$var$DAY_MAP = {\n  sun: 0,\n  mon: 1,\n  tue: 2,\n  wed: 3,\n  thu: 4,\n  fri: 5,\n  sat: 6\n};\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale, firstDayOfWeek) {\n  let julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let weekStart = firstDayOfWeek ? $14e0f24ef4ac5c92$var$DAY_MAP[firstDayOfWeek] : $14e0f24ef4ac5c92$var$getWeekStart(locale);\n  let dayOfWeek = Math.ceil(julian + 1 - weekStart) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(a, timeZone);\n  let tomorrow = a.add({\n    days: 1\n  });\n  let tomorrowMs = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale, firstDayOfWeek) {\n  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale, firstDayOfWeek);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale, firstDayOfWeek) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale, firstDayOfWeek).add({\n    days: 6\n  });\n}\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? undefined : part;\n}\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return region ? (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0 : 0;\n}\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale, firstDayOfWeek) {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale, firstDayOfWeek) + days) / 7);\n}\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  let julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\nexport { $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$68781ddf31c0090f as compareDate, $14e0f24ef4ac5c92$export$c19a80a9721b80f6 as compareTime, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday };","map":{"version":3,"names":["$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$11d87f3f76e88657$export$b4a036af3fc0b032","calendar","era","year","month","day","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","identifier","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","date","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$var$DAY_MAP","sun","mon","tue","wed","thu","fri","sat","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","firstDayOfWeek","julian","toJulianDay","weekStart","$14e0f24ef4ac5c92$var$getWeekStart","dayOfWeek","Math","ceil","$14e0f24ef4ac5c92$export$461939dd4422153","$11d87f3f76e88657$export$1b96692a1ba042ac","Date","now","$11d87f3f76e88657$export$93522d1a439f3617","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","hour","minute","second","millisecond","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","$11d87f3f76e88657$export$5107c82f94518f5c","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","getDaysInMonth","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","getMonthsInYear","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","undefined","$2fe286d2fb449abb$export$7a5acbd77d414bd9","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","AF","AE","BH","DZ","EG","IL","IQ","IR","JO","KW","LY","OM","QA","SA","SD","SY","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/queries.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\nconst DAY_MAP = {\n  sun: 0,\n  mon: 1,\n  tue: 2,\n  wed: 3,\n  thu: 4,\n  fri: 5,\n  sat: 6\n};\n\ntype DayOfWeek = 'sun' | 'mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat';\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string, firstDayOfWeek?: DayOfWeek): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let weekStart = firstDayOfWeek ? DAY_MAP[firstDayOfWeek] : getWeekStart(locale);\n  let dayOfWeek = Math.ceil(julian + 1 - weekStart) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone: string | null = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone!;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string, firstDayOfWeek?: DayOfWeek): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string, firstDayOfWeek?: DayOfWeek): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string, firstDayOfWeek?: DayOfWeek): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string, firstDayOfWeek?: DayOfWeek): DateValue;\nexport function startOfWeek(date: DateValue, locale: string, firstDayOfWeek?: DayOfWeek): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale, firstDayOfWeek);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string, firstDayOfWeek?: DayOfWeek): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string, firstDayOfWeek?: DayOfWeek): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string, firstDayOfWeek?: DayOfWeek): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string, firstDayOfWeek?: DayOfWeek): DateValue;\nexport function endOfWeek(date: DateValue, locale: string, firstDayOfWeek?: DayOfWeek): DateValue {\n  return startOfWeek(date, locale, firstDayOfWeek).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string): string | undefined {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      if (region) {\n        cachedRegions.set(locale, region);\n      }\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? undefined : part;\n}\n\nfunction getWeekStart(locale: string): number {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return region ? weekStartData[region] || 0 : 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string, firstDayOfWeek?: DayOfWeek): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale, firstDayOfWeek) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a?: A | null, b?: B | null): A | B | null | undefined {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a?: A | null, b?: B | null): A | B | null | undefined {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region!] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}