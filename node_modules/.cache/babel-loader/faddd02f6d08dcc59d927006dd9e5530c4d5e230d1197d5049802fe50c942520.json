{"ast":null,"code":"// src/create-anatomy.ts\nvar createAnatomy = (name, parts = []) => ({\n  parts: (...values) => {\n    if (isEmpty(parts)) {\n      return createAnatomy(name, values);\n    }\n    throw new Error(\"createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?\");\n  },\n  extendWith: (...values) => createAnatomy(name, [...parts, ...values]),\n  rename: newName => createAnatomy(newName, parts),\n  keys: () => parts,\n  build: () => [...new Set(parts)].reduce((prev, part) => Object.assign(prev, {\n    [part]: {\n      selector: [`&[data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`, `& [data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`].join(\", \"),\n      attrs: {\n        \"data-scope\": toKebabCase(name),\n        \"data-part\": toKebabCase(part)\n      }\n    }\n  }), {})\n});\nvar toKebabCase = value => value.replace(/([A-Z])([A-Z])/g, \"$1-$2\").replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[\\s_]+/g, \"-\").toLowerCase();\nvar isEmpty = v => v.length === 0;\nexport { createAnatomy };","map":{"version":3,"names":["createAnatomy","name","parts","values","isEmpty","Error","extendWith","rename","newName","keys","build","Set","reduce","prev","part","Object","assign","selector","toKebabCase","join","attrs","value","replace","toLowerCase","v","length"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@zag-js/anatomy/dist/index.mjs"],"sourcesContent":["// src/create-anatomy.ts\nvar createAnatomy = (name, parts = []) => ({\n  parts: (...values) => {\n    if (isEmpty(parts)) {\n      return createAnatomy(name, values);\n    }\n    throw new Error(\"createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?\");\n  },\n  extendWith: (...values) => createAnatomy(name, [...parts, ...values]),\n  rename: (newName) => createAnatomy(newName, parts),\n  keys: () => parts,\n  build: () => [...new Set(parts)].reduce(\n    (prev, part) => Object.assign(prev, {\n      [part]: {\n        selector: [\n          `&[data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`,\n          `& [data-scope=\"${toKebabCase(name)}\"][data-part=\"${toKebabCase(part)}\"]`\n        ].join(\", \"),\n        attrs: { \"data-scope\": toKebabCase(name), \"data-part\": toKebabCase(part) }\n      }\n    }),\n    {}\n  )\n});\nvar toKebabCase = (value) => value.replace(/([A-Z])([A-Z])/g, \"$1-$2\").replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[\\s_]+/g, \"-\").toLowerCase();\nvar isEmpty = (v) => v.length === 0;\n\nexport { createAnatomy };\n"],"mappings":"AAAA;AACA,IAAIA,aAAa,GAAGA,CAACC,IAAI,EAAEC,KAAK,GAAG,EAAE,MAAM;EACzCA,KAAK,EAAEA,CAAC,GAAGC,MAAM,KAAK;IACpB,IAAIC,OAAO,CAACF,KAAK,CAAC,EAAE;MAClB,OAAOF,aAAa,CAACC,IAAI,EAAEE,MAAM,CAAC;IACpC;IACA,MAAM,IAAIE,KAAK,CAAC,+FAA+F,CAAC;EAClH,CAAC;EACDC,UAAU,EAAEA,CAAC,GAAGH,MAAM,KAAKH,aAAa,CAACC,IAAI,EAAE,CAAC,GAAGC,KAAK,EAAE,GAAGC,MAAM,CAAC,CAAC;EACrEI,MAAM,EAAGC,OAAO,IAAKR,aAAa,CAACQ,OAAO,EAAEN,KAAK,CAAC;EAClDO,IAAI,EAAEA,CAAA,KAAMP,KAAK;EACjBQ,KAAK,EAAEA,CAAA,KAAM,CAAC,GAAG,IAAIC,GAAG,CAACT,KAAK,CAAC,CAAC,CAACU,MAAM,CACrC,CAACC,IAAI,EAAEC,IAAI,KAAKC,MAAM,CAACC,MAAM,CAACH,IAAI,EAAE;IAClC,CAACC,IAAI,GAAG;MACNG,QAAQ,EAAE,CACR,iBAAiBC,WAAW,CAACjB,IAAI,CAAC,iBAAiBiB,WAAW,CAACJ,IAAI,CAAC,IAAI,EACxE,kBAAkBI,WAAW,CAACjB,IAAI,CAAC,iBAAiBiB,WAAW,CAACJ,IAAI,CAAC,IAAI,CAC1E,CAACK,IAAI,CAAC,IAAI,CAAC;MACZC,KAAK,EAAE;QAAE,YAAY,EAAEF,WAAW,CAACjB,IAAI,CAAC;QAAE,WAAW,EAAEiB,WAAW,CAACJ,IAAI;MAAE;IAC3E;EACF,CAAC,CAAC,EACF,CAAC,CACH;AACF,CAAC,CAAC;AACF,IAAII,WAAW,GAAIG,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAACA,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;AAChJ,IAAInB,OAAO,GAAIoB,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAK,CAAC;AAEnC,SAASzB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}