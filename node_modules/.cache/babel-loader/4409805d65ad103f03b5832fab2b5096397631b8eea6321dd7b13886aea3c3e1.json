{"ast":null,"code":"import { CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f } from \"./CalendarDate.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1 // number of days from months (1 based)\n  ) + day - 1 // number of days for present month (1 based)\n  ;\n}\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n  let year = Math.floor(4 * (jd - epoch) / 1461);\n  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0)\n    // not intercalary month\n    return 30;else\n    // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    }\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n  }\n  getMonthsInYear() {\n    return 13;\n  }\n  getDaysInYear(date) {\n    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n  }\n  getYearsInEra(date) {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n  getEras() {\n    return ['AA', 'AM'];\n  }\n  constructor() {\n    this.identifier = 'ethiopic';\n  }\n}\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, 'AA', year, month, day);\n  }\n  getEras() {\n    return ['AA'];\n  }\n  getYearsInEra() {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n  constructor(...args) {\n    super(...args), this.identifier = 'ethioaa' // also known as 'ethiopic-amete-alem' in ICU\n    ;\n  }\n}\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n  isInverseEra(date) {\n    return date.era === 'BCE';\n  }\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n  getYearsInEra(date) {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n  constructor(...args) {\n    super(...args), this.identifier = 'coptic';\n  }\n}\nexport { $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar };","map":{"version":3,"names":["$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","epoch","year","month","day","Math","floor","$b956b2d7a6cf451f$var$julianDayToCE","jd","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","fromJulianDay","era","$35ea8db9cb2ccb90$export$99faa760c7908e4f","toJulianDay","date","getDaysInMonth","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","identifier","$b956b2d7a6cf451f$export$d72e0c37005a4914","args","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","isInverseEra","balanceDate"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/EthiopicCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(epoch: number, jd: number) {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += AMETE_MIHRET_DELTA;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    year += AMETE_MIHRET_DELTA;\n    return new CalendarDate(this, 'AA', year, month, day);\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  getYearsInEra(): number {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;GAAA,CAYA;AACA;;AAMA,MAAMA,oCAAA,GAAiB;AACvB,MAAMC,kCAAA,GAAe;AAErB;AACA;AACA,MAAMC,wCAAA,GAAqB;AAE3B,SAASC,oCAAcC,KAAa,EAAEC,IAAY,EAAEC,KAAa,EAAEC,GAAW;EAC5E,OACEH,KAAA,CAAwB;EAAA,EACtB,MAAMC,IAAA,CAAgB;EAAA,EACtBG,IAAA,CAAKC,KAAK,CAACJ,IAAA,GAAO,GAAI;EAAA,EACtB,MAAMC,KAAA,GAAQ,EAAQ;EAAA,CAAR,GACdC,GAAA,GAAM,EAAgB;EAAA;AAE5B;AAEA,SAASG,oCAAcN,KAAa,EAAEO,EAAU;EAC9C,IAAIN,IAAA,GAAOG,IAAA,CAAKC,KAAK,CAAC,CAAC,IAAKE,EAAA,GAAKP,KAAI,IAAM;EAC3C,IAAIE,KAAA,GAAQ,IAAIE,IAAA,CAAKC,KAAK,CAAC,CAACE,EAAA,GAAKR,mCAAA,CAAcC,KAAA,EAAOC,IAAA,EAAM,GAAG,EAAC,IAAK;EACrE,IAAIE,GAAA,GAAMI,EAAA,GAAK,IAAIR,mCAAA,CAAcC,KAAA,EAAOC,IAAA,EAAMC,KAAA,EAAO;EACrD,OAAO,CAACD,IAAA,EAAMC,KAAA,EAAOC,GAAA,CAAI;AAC3B;AAEA,SAASK,iCAAWP,IAAY;EAC9B,OAAOG,IAAA,CAAKC,KAAK,CAACJ,IAAC,GAAO,IAAK;AACjC;AAEA,SAASQ,qCAAeR,IAAY,EAAEC,KAAa;EACjD;EACA;EACA;EACA;EACA;EACA,IAAIA,KAAA,GAAQ,OAAO;IACjB;IACA,OAAO;IAEP;IACA,OAAOM,gCAAA,CAAWP,IAAA,IAAQ;AAE9B;AAOO,MAAMS,yCAAA;EAGXC,cAAcJ,EAAU,EAAgB;IACtC,IAAI,CAACN,IAAA,EAAMC,KAAA,EAAOC,GAAA,CAAI,GAAGG,mCAAA,CAAcV,oCAAA,EAAgBW,EAAA;IACvD,IAAIK,GAAA,GAAM;IACV,IAAIX,IAAA,IAAQ,GAAG;MACbW,GAAA,GAAM;MACNX,IAAA,IAAQH,wCAAA;IACV;IAEA,OAAO,KAAI,GAAAe,yCAAW,EAAE,IAAI,EAAED,GAAA,EAAKX,IAAA,EAAMC,KAAA,EAAOC,GAAA;EAClD;EAEAW,YAAYC,IAAqB,EAAE;IACjC,IAAId,IAAA,GAAOc,IAAA,CAAKd,IAAI;IACpB,IAAIc,IAAA,CAAKH,GAAG,KAAK,MACfX,IAAA,IAAQH,wCAAA;IAGV,OAAOC,mCAAA,CAAcH,oCAAA,EAAgBK,IAAA,EAAMc,IAAA,CAAKb,KAAK,EAAEa,IAAA,CAAKZ,GAAG;EACjE;EAEAa,eAAeD,IAAqB,EAAU;IAC5C,OAAON,oCAAA,CAAeM,IAAA,CAAKd,IAAI,EAAEc,IAAA,CAAKb,KAAK;EAC7C;EAEAe,gBAAA,EAA0B;IACxB,OAAO;EACT;EAEAC,cAAcH,IAAqB,EAAU;IAC3C,OAAO,MAAMP,gCAAA,CAAWO,IAAA,CAAKd,IAAI;EACnC;EAEAkB,cAAcJ,IAAqB,EAAU;IAC3C;IACA;IACA;IACA,OAAOA,IAAA,CAAKH,GAAG,KAAK,OAAO,OAAO;EACpC;EAEAQ,QAAA,EAAU;IACR,OAAO,CAAC,MAAM,KAAK;EACrB;;SA3CAC,UAAA,GAAa;;AA4Cf;AAMO,MAAMC,yCAAA,SAAkCZ,yCAAA;EAG7CC,cAAcJ,EAAU,EAAgB;IACtC,IAAI,CAACN,IAAA,EAAMC,KAAA,EAAOC,GAAA,CAAI,GAAGG,mCAAA,CAAcV,oCAAA,EAAgBW,EAAA;IACvDN,IAAA,IAAQH,wCAAA;IACR,OAAO,KAAI,GAAAe,yCAAW,EAAE,IAAI,EAAE,MAAMZ,IAAA,EAAMC,KAAA,EAAOC,GAAA;EACnD;EAEAiB,QAAA,EAAU;IACR,OAAO,CAAC,KAAK;EACf;EAEAD,cAAA,EAAwB;IACtB;IACA,OAAO;EACT;;IAhBK,SAAAI,IAAA,QACLF,UAAA,GAAa,UAAW;IAAA;;AAgB1B;AAOO,MAAMG,yCAAA,SAAuBd,yCAAA;EAGlCC,cAAcJ,EAAU,EAAgB;IACtC,IAAI,CAACN,IAAA,EAAMC,KAAA,EAAOC,GAAA,CAAI,GAAGG,mCAAA,CAAcT,kCAAA,EAAcU,EAAA;IACrD,IAAIK,GAAA,GAAM;IACV,IAAIX,IAAA,IAAQ,GAAG;MACbW,GAAA,GAAM;MACNX,IAAA,GAAO,IAAIA,IAAA;IACb;IAEA,OAAO,KAAI,GAAAY,yCAAW,EAAE,IAAI,EAAED,GAAA,EAAKX,IAAA,EAAMC,KAAA,EAAOC,GAAA;EAClD;EAEAW,YAAYC,IAAqB,EAAE;IACjC,IAAId,IAAA,GAAOc,IAAA,CAAKd,IAAI;IACpB,IAAIc,IAAA,CAAKH,GAAG,KAAK,OACfX,IAAA,GAAO,IAAIA,IAAA;IAGb,OAAOF,mCAAA,CAAcF,kCAAA,EAAcI,IAAA,EAAMc,IAAA,CAAKb,KAAK,EAAEa,IAAA,CAAKZ,GAAG;EAC/D;EAEAa,eAAeD,IAAqB,EAAU;IAC5C,IAAId,IAAA,GAAOc,IAAA,CAAKd,IAAI;IACpB,IAAIc,IAAA,CAAKH,GAAG,KAAK,OACfX,IAAA,GAAO,IAAIA,IAAA;IAGb,OAAOQ,oCAAA,CAAeR,IAAA,EAAMc,IAAA,CAAKb,KAAK;EACxC;EAEAuB,aAAaV,IAAqB,EAAW;IAC3C,OAAOA,IAAA,CAAKH,GAAG,KAAK;EACtB;EAEAc,YAAYX,IAA8B,EAAE;IAC1C,IAAIA,IAAA,CAAKd,IAAI,IAAI,GAAG;MAClBc,IAAA,CAAKH,GAAG,GAAGG,IAAA,CAAKH,GAAG,KAAK,QAAQ,OAAO;MACvCG,IAAA,CAAKd,IAAI,GAAG,IAAIc,IAAA,CAAKd,IAAI;IAC3B;EACF;EAEAmB,QAAA,EAAU;IACR,OAAO,CAAC,OAAO,KAAK;EACtB;EAEAD,cAAcJ,IAAqB,EAAU;IAC3C;IACA;IACA;IACA,OAAOA,IAAA,CAAKH,GAAG,KAAK,QAAQ,OAAO;EACrC;;IApDK,SAAAW,IAAA,QACLF,UAAA,GAAa;;AAoDf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}