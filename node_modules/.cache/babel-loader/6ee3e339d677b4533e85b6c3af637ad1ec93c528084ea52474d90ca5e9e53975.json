{"ast":null,"code":"\"use strict\";\n\nimport { omit } from '../utils/omit.js';\nimport { splitProps } from '../utils/split-props.js';\nconst getSlotRecipes = (config = {}) => {\n  const init = slot => ({\n    base: config.base?.[slot] ?? {},\n    variants: {},\n    defaultVariants: config.defaultVariants ?? {},\n    compoundVariants: config.compoundVariants ? getSlotCompoundVariant(config.compoundVariants, slot) : []\n  });\n  const slots = config.slots ?? [];\n  const entries = slots.map(slot => [slot, init(slot)]);\n  for (const [variantsKey, variantsSpec] of Object.entries(config.variants ?? {})) {\n    for (const [variantKey, variantSpec] of Object.entries(variantsSpec)) {\n      entries.forEach(([slot, slotRecipe]) => {\n        var _a;\n        (_a = slotRecipe.variants)[variantsKey] ?? (_a[variantsKey] = {});\n        slotRecipe.variants[variantsKey][variantKey] = variantSpec[slot] ?? {};\n      });\n    }\n  }\n  return Object.fromEntries(entries);\n};\nconst getSlotCompoundVariant = (compoundVariants, slotName) => compoundVariants.filter(compoundVariant => compoundVariant.css[slotName]).map(compoundVariant => ({\n  ...compoundVariant,\n  css: compoundVariant.css[slotName]\n}));\nfunction createSlotRecipeFn(options) {\n  const {\n    cva\n  } = options;\n  return function sva(config = {}) {\n    const slots = Object.entries(getSlotRecipes(config)).map(([slot, slotCva]) => [slot, cva(slotCva)]);\n    function svaFn(props) {\n      const result = slots.map(([slot, cvaFn]) => [slot, cvaFn(props)]);\n      return Object.fromEntries(result);\n    }\n    const variants = config.variants ?? {};\n    const variantKeys = Object.keys(variants);\n    function splitVariantProps(props) {\n      const restProps = omit(props, [\"recipe\"]);\n      const [recipeProps, localProps] = splitProps(restProps, variantKeys);\n      if (!variantKeys.includes(\"colorPalette\")) {\n        recipeProps.colorPalette = props.colorPalette || config.defaultVariants?.colorPalette;\n      }\n      if (variantKeys.includes(\"orientation\")) {\n        localProps.orientation = props.orientation;\n      }\n      return [recipeProps, localProps];\n    }\n    const variantMap = Object.fromEntries(Object.entries(variants).map(([key, value]) => [key, Object.keys(value)]));\n    let classNameMap = {};\n    if (config.className) {\n      classNameMap = Object.fromEntries(config.slots.map(slot => [slot, `${config.className}__${slot}`]));\n    }\n    return Object.assign(svaFn, {\n      variantMap,\n      variantKeys,\n      splitVariantProps,\n      classNameMap\n    });\n  };\n}\nexport { createSlotRecipeFn, getSlotCompoundVariant };","map":{"version":3,"names":["omit","splitProps","getSlotRecipes","config","init","slot","base","variants","defaultVariants","compoundVariants","getSlotCompoundVariant","slots","entries","map","variantsKey","variantsSpec","Object","variantKey","variantSpec","forEach","slotRecipe","_a","fromEntries","slotName","filter","compoundVariant","css","createSlotRecipeFn","options","cva","sva","slotCva","svaFn","props","result","cvaFn","variantKeys","keys","splitVariantProps","restProps","recipeProps","localProps","includes","colorPalette","orientation","variantMap","key","value","classNameMap","className","assign"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@chakra-ui/react/dist/esm/styled-system/sva.js"],"sourcesContent":["\"use strict\";\nimport { omit } from '../utils/omit.js';\nimport { splitProps } from '../utils/split-props.js';\n\nconst getSlotRecipes = (config = {}) => {\n  const init = (slot) => ({\n    base: config.base?.[slot] ?? {},\n    variants: {},\n    defaultVariants: config.defaultVariants ?? {},\n    compoundVariants: config.compoundVariants ? getSlotCompoundVariant(config.compoundVariants, slot) : []\n  });\n  const slots = config.slots ?? [];\n  const entries = slots.map((slot) => [slot, init(slot)]);\n  for (const [variantsKey, variantsSpec] of Object.entries(\n    config.variants ?? {}\n  )) {\n    for (const [variantKey, variantSpec] of Object.entries(\n      variantsSpec\n    )) {\n      entries.forEach(([slot, slotRecipe]) => {\n        var _a;\n        (_a = slotRecipe.variants)[variantsKey] ?? (_a[variantsKey] = {});\n        slotRecipe.variants[variantsKey][variantKey] = variantSpec[slot] ?? {};\n      });\n    }\n  }\n  return Object.fromEntries(entries);\n};\nconst getSlotCompoundVariant = (compoundVariants, slotName) => compoundVariants.filter((compoundVariant) => compoundVariant.css[slotName]).map((compoundVariant) => ({\n  ...compoundVariant,\n  css: compoundVariant.css[slotName]\n}));\nfunction createSlotRecipeFn(options) {\n  const { cva } = options;\n  return function sva(config = {}) {\n    const slots = Object.entries(getSlotRecipes(config)).map(\n      ([slot, slotCva]) => [slot, cva(slotCva)]\n    );\n    function svaFn(props) {\n      const result = slots.map(([slot, cvaFn]) => [slot, cvaFn(props)]);\n      return Object.fromEntries(result);\n    }\n    const variants = config.variants ?? {};\n    const variantKeys = Object.keys(variants);\n    function splitVariantProps(props) {\n      const restProps = omit(props, [\"recipe\"]);\n      const [recipeProps, localProps] = splitProps(restProps, variantKeys);\n      if (!variantKeys.includes(\"colorPalette\")) {\n        recipeProps.colorPalette = props.colorPalette || config.defaultVariants?.colorPalette;\n      }\n      if (variantKeys.includes(\"orientation\")) {\n        localProps.orientation = props.orientation;\n      }\n      return [recipeProps, localProps];\n    }\n    const variantMap = Object.fromEntries(\n      Object.entries(variants).map(([key, value]) => [key, Object.keys(value)])\n    );\n    let classNameMap = {};\n    if (config.className) {\n      classNameMap = Object.fromEntries(\n        config.slots.map((slot) => [\n          slot,\n          `${config.className}__${slot}`\n        ])\n      );\n    }\n    return Object.assign(svaFn, {\n      variantMap,\n      variantKeys,\n      splitVariantProps,\n      classNameMap\n    });\n  };\n}\n\nexport { createSlotRecipeFn, getSlotCompoundVariant };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}