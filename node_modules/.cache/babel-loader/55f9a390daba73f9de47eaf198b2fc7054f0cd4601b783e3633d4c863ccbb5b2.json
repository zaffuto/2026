{"ast":null,"code":"var QrCodeDataType = /* @__PURE__ */(QrCodeDataType2 => {\n  QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n  QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n  QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n  QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n  QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n  QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n  return QrCodeDataType2;\n})(QrCodeDataType || {});\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst LOW = [0, 1];\nconst MEDIUM = [1, 0];\nconst QUARTILE = [2, 3];\nconst HIGH = [3, 2];\nconst EccMap = {\n  L: LOW,\n  M: MEDIUM,\n  Q: QUARTILE,\n  H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n// Version: (note that index 0 is for padding, and is set to an illegal value)\n// 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n[-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n// Low\n[-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n// Medium\n[-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n// Quartile\n[-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n// High\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n// Version: (note that index 0 is for padding, and is set to an illegal value)\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n// Low\n[-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n// Medium\n[-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n// Quartile\n[-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n// High\n];\nclass QrCode {\n  /* -- Constructor (low level) and fields -- */\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  constructor(version, ecc, dataCodewords, msk) {\n    this.version = version;\n    this.ecc = ecc;\n    /* -- Fields -- */\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    __publicField(this, \"size\");\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    __publicField(this, \"mask\");\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    __publicField(this, \"modules\", []);\n    __publicField(this, \"types\", []);\n    if (version < MIN_VERSION || version > MAX_VERSION) throw new RangeError(\"Version value out of range\");\n    if (msk < -1 || msk > 7) throw new RangeError(\"Mask value out of range\");\n    this.size = version * 4 + 17;\n    const row = Array.from({\n      length: this.size\n    }, () => false);\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice());\n      this.types.push(row.map(() => 0));\n    }\n    this.drawFunctionPatterns();\n    const allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n    if (msk === -1) {\n      let minPenalty = 1e9;\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i);\n        this.drawFormatBits(i);\n        const penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = i;\n          minPenalty = penalty;\n        }\n        this.applyMask(i);\n      }\n    }\n    this.mask = msk;\n    this.applyMask(msk);\n    this.drawFormatBits(msk);\n  }\n  /* -- Accessor methods -- */\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  getModule(x, y) {\n    return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n  }\n  /* -- Private helper methods for constructor: Drawing function modules -- */\n  // Reads this object's version field, and draws and marks all function modules.\n  drawFunctionPatterns() {\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n      this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n    }\n    this.drawFinderPattern(3, 3);\n    this.drawFinderPattern(this.size - 4, 3);\n    this.drawFinderPattern(3, this.size - 4);\n    const alignPatPos = this.getAlignmentPatternPositions();\n    const numAlign = alignPatPos.length;\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0)) this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n      }\n    }\n    this.drawFormatBits(0);\n    this.drawVersion();\n  }\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  drawFormatBits(mask) {\n    const data = this.ecc[1] << 3 | mask;\n    let rem = data;\n    for (let i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 1335;\n    const bits = (data << 10 | rem) ^ 21522;\n    for (let i = 0; i <= 5; i++) this.setFunctionModule(8, i, getBit(bits, i));\n    this.setFunctionModule(8, 7, getBit(bits, 6));\n    this.setFunctionModule(8, 8, getBit(bits, 7));\n    this.setFunctionModule(7, 8, getBit(bits, 8));\n    for (let i = 9; i < 15; i++) this.setFunctionModule(14 - i, 8, getBit(bits, i));\n    for (let i = 0; i < 8; i++) this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n    for (let i = 8; i < 15; i++) this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n    this.setFunctionModule(8, this.size - 8, true);\n  }\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  drawVersion() {\n    if (this.version < 7) return;\n    let rem = this.version;\n    for (let i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 7973;\n    const bits = this.version << 12 | rem;\n    for (let i = 0; i < 18; i++) {\n      const color = getBit(bits, i);\n      const a = this.size - 11 + i % 3;\n      const b = Math.floor(i / 3);\n      this.setFunctionModule(a, b, color);\n      this.setFunctionModule(b, a, color);\n    }\n  }\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  drawFinderPattern(x, y) {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist = Math.max(Math.abs(dx), Math.abs(dy));\n        const xx = x + dx;\n        const yy = y + dy;\n        if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size) this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n      }\n    }\n  }\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  drawAlignmentPattern(x, y) {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) !== 1, QrCodeDataType.Alignment);\n      }\n    }\n  }\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {\n    this.modules[y][x] = isDark;\n    this.types[y][x] = type;\n  }\n  /* -- Private helper methods for constructor: Codewords and masking -- */\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  addEccAndInterleave(data) {\n    const ver = this.version;\n    const ecl = this.ecc;\n    if (data.length !== getNumDataCodewords(ver, ecl)) throw new RangeError(\"Invalid argument\");\n    const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n    const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n    const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n    const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n    const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n    const blocks = [];\n    const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n      k += dat.length;\n      const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n      if (i < numShortBlocks) dat.push(0);\n      blocks.push(dat.concat(ecc));\n    }\n    const result = [];\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i]);\n      });\n    }\n    return result;\n  }\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  drawCodewords(data) {\n    if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8)) throw new RangeError(\"Invalid argument\");\n    let i = 0;\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      if (right === 6) right = 5;\n      for (let vert = 0; vert < this.size; vert++) {\n        for (let j = 0; j < 2; j++) {\n          const x = right - j;\n          const upward = (right + 1 & 2) === 0;\n          const y = upward ? this.size - 1 - vert : vert;\n          if (!this.types[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n            i++;\n          }\n        }\n      }\n    }\n  }\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  applyMask(mask) {\n    if (mask < 0 || mask > 7) throw new RangeError(\"Mask value out of range\");\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert;\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 === 0;\n            break;\n          case 1:\n            invert = y % 2 === 0;\n            break;\n          case 2:\n            invert = x % 3 === 0;\n            break;\n          case 3:\n            invert = (x + y) % 3 === 0;\n            break;\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n            break;\n          case 5:\n            invert = x * y % 2 + x * y % 3 === 0;\n            break;\n          case 6:\n            invert = (x * y % 2 + x * y % 3) % 2 === 0;\n            break;\n          case 7:\n            invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n            break;\n          default:\n            throw new Error(\"Unreachable\");\n        }\n        if (!this.types[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n      }\n    }\n  }\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  getPenaltyScore() {\n    let result = 0;\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false;\n      let runX = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] === runColor) {\n          runX++;\n          if (runX === 5) result += PENALTY_N1;else if (runX > 5) result++;\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory);\n          if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runX = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n    }\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false;\n      let runY = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] === runColor) {\n          runY++;\n          if (runY === 5) result += PENALTY_N1;else if (runY > 5) result++;\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory);\n          if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runY = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n    }\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color = this.modules[y][x];\n        if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1]) result += PENALTY_N2;\n      }\n    }\n    let dark = 0;\n    for (const row of this.modules) dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n    const total = this.size * this.size;\n    const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n    result += k * PENALTY_N4;\n    return result;\n  }\n  /* -- Private helper functions -- */\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  getAlignmentPatternPositions() {\n    if (this.version === 1) {\n      return [];\n    } else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      const result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  finderPenaltyCountPatterns(runHistory) {\n    const n = runHistory[1];\n    const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n    return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n  }\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n    if (currentRunColor) {\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      currentRunLength = 0;\n    }\n    currentRunLength += this.size;\n    this.finderPenaltyAddHistory(currentRunLength, runHistory);\n    return this.finderPenaltyCountPatterns(runHistory);\n  }\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  finderPenaltyAddHistory(currentRunLength, runHistory) {\n    if (runHistory[0] === 0) currentRunLength += this.size;\n    runHistory.pop();\n    runHistory.unshift(currentRunLength);\n  }\n}\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len !== 0) throw new RangeError(\"Value out of range\");\n  for (let i = len - 1; i >= 0; i--) bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n  return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  constructor(mode, numChars, bitData) {\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0) throw new RangeError(\"Invalid argument\");\n    this.bitData = bitData.slice();\n  }\n  /* -- Methods -- */\n  // Returns a new copy of the data bits of this segment.\n  getData() {\n    return this.bitData.slice();\n  }\n}\nconst MODE_NUMERIC = [1, 10, 12, 14];\nconst MODE_ALPHANUMERIC = [2, 9, 11, 13];\nconst MODE_BYTE = [4, 8, 16, 16];\nfunction numCharCountBits(mode, ver) {\n  return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n  const bb = [];\n  for (const b of data) appendBits(b, 8, bb);\n  return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n  if (!isNumeric(digits)) throw new RangeError(\"String contains non-numeric characters\");\n  const bb = [];\n  for (let i = 0; i < digits.length;) {\n    const n = Math.min(digits.length - i, 3);\n    appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n    i += n;\n  }\n  return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n  if (!isAlphanumeric(text)) throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n  const bb = [];\n  let i;\n  for (i = 0; i + 2 <= text.length; i += 2) {\n    let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n    temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n    appendBits(temp, 11, bb);\n  }\n  if (i < text.length) appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n  return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n  if (text === \"\") return [];else if (isNumeric(text)) return [makeNumeric(text)];else if (isAlphanumeric(text)) return [makeAlphanumeric(text)];else return [makeBytes(toUtf8ByteArray(text))];\n}\nfunction isNumeric(text) {\n  return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n  return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n  let result = 0;\n  for (const seg of segs) {\n    const ccbits = numCharCountBits(seg.mode, version);\n    if (seg.numChars >= 1 << ccbits) return Number.POSITIVE_INFINITY;\n    result += 4 + ccbits + seg.bitData.length;\n  }\n  return result;\n}\nfunction toUtf8ByteArray(str) {\n  str = encodeURI(str);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \"%\") {\n      result.push(str.charCodeAt(i));\n    } else {\n      result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n      i += 2;\n    }\n  }\n  return result;\n}\nfunction getNumRawDataModules(ver) {\n  if (ver < MIN_VERSION || ver > MAX_VERSION) throw new RangeError(\"Version number out of range\");\n  let result = (16 * ver + 128) * ver + 64;\n  if (ver >= 2) {\n    const numAlign = Math.floor(ver / 7) + 2;\n    result -= (25 * numAlign - 10) * numAlign - 55;\n    if (ver >= 7) result -= 36;\n  }\n  return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n  return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n  if (degree < 1 || degree > 255) throw new RangeError(\"Degree out of range\");\n  const result = [];\n  for (let i = 0; i < degree - 1; i++) result.push(0);\n  result.push(1);\n  let root = 1;\n  for (let i = 0; i < degree; i++) {\n    for (let j = 0; j < result.length; j++) {\n      result[j] = reedSolomonMultiply(result[j], root);\n      if (j + 1 < result.length) result[j] ^= result[j + 1];\n    }\n    root = reedSolomonMultiply(root, 2);\n  }\n  return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n  const result = divisor.map(_ => 0);\n  for (const b of data) {\n    const factor = b ^ result.shift();\n    result.push(0);\n    divisor.forEach((coef, i) => result[i] ^= reedSolomonMultiply(coef, factor));\n  }\n  return result;\n}\nfunction reedSolomonMultiply(x, y) {\n  if (x >>> 8 !== 0 || y >>> 8 !== 0) throw new RangeError(\"Byte out of range\");\n  let z = 0;\n  for (let i = 7; i >= 0; i--) {\n    z = z << 1 ^ (z >>> 7) * 285;\n    z ^= (y >>> i & 1) * x;\n  }\n  return z;\n}\nfunction encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n  if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError(\"Invalid value\");\n  let version;\n  let dataUsedBits;\n  for (version = minVersion;; version++) {\n    const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n    const usedBits = getTotalBits(segs, version);\n    if (usedBits <= dataCapacityBits2) {\n      dataUsedBits = usedBits;\n      break;\n    }\n    if (version >= maxVersion) throw new RangeError(\"Data too long\");\n  }\n  for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {\n    if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n  }\n  const bb = [];\n  for (const seg of segs) {\n    appendBits(seg.mode[0], 4, bb);\n    appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n    for (const b of seg.getData()) bb.push(b);\n  }\n  const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n  appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n  appendBits(0, (8 - bb.length % 8) % 8, bb);\n  for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17) appendBits(padByte, 8, bb);\n  const dataCodewords = Array.from({\n    length: Math.ceil(bb.length / 8)\n  }, () => 0);\n  bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n  return new QrCode(version, ecl, dataCodewords, mask);\n}\nfunction encode(data, options) {\n  const {\n    ecc = \"L\",\n    boostEcc = false,\n    minVersion = 1,\n    maxVersion = 40,\n    maskPattern = -1,\n    border = 1\n  } = options || {};\n  const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [makeBytes(data)] : void 0;\n  if (!segment) throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data}`);\n  const qr = encodeSegments(segment, EccMap[ecc], minVersion, maxVersion, maskPattern, boostEcc);\n  const result = addBorder({\n    version: qr.version,\n    maskPattern: qr.mask,\n    size: qr.size,\n    data: qr.modules,\n    types: qr.types\n  }, border);\n  if (options?.invert) result.data = result.data.map(row => row.map(mod => !mod));\n  options?.onEncoded?.(result);\n  return result;\n}\nfunction addBorder(input, border = 1) {\n  if (!border) return input;\n  const {\n    size\n  } = input;\n  const newSize = size + border * 2;\n  input.size = newSize;\n  input.data.forEach(row => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(false);\n      row.push(false);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.data.unshift(Array.from({\n      length: newSize\n    }, _ => false));\n    input.data.push(Array.from({\n      length: newSize\n    }, _ => false));\n  }\n  const b = QrCodeDataType.Border;\n  input.types.forEach(row => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(b);\n      row.push(b);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.types.unshift(Array.from({\n      length: newSize\n    }, _ => b));\n    input.types.push(Array.from({\n      length: newSize\n    }, _ => b));\n  }\n  return input;\n}\nfunction getDataAt(data, x, y, defaults = false) {\n  if (x < 0 || y < 0 || x >= data.length || y >= data.length) return defaults;\n  return data[y][x];\n}\nfunction renderUnicode(data, options = {}) {\n  const {\n    whiteChar = \"\\u2588\",\n    blackChar = \"\\u2591\"\n  } = options;\n  const result = encode(data, options);\n  return result.data.map(row => {\n    return row.map(mod => mod ? blackChar : whiteChar).join(\"\");\n  }).join(\"\\n\");\n}\nfunction renderANSI(data, options = {}) {\n  return renderUnicode(data, {\n    ...options,\n    blackChar: \"\\x1B[40m\\u3000\\x1B[0m\",\n    whiteChar: \"\\x1B[47m\\u3000\\x1B[0m\"\n  });\n}\nfunction renderUnicodeCompact(data, options = {}) {\n  const platte = {\n    WHITE_ALL: \"\\u2588\",\n    WHITE_BLACK: \"\\u2580\",\n    BLACK_WHITE: \"\\u2584\",\n    BLACK_ALL: \" \"\n  };\n  const result = encode(data, options);\n  const WHITE = false;\n  const BLACK = true;\n  const at = (x, y) => getDataAt(result.data, x, y, true);\n  const lines = [];\n  let line = \"\";\n  for (let row = 0; row < result.size; row += 2) {\n    for (let col = 0; col < result.size; col++) {\n      if (at(col, row) === WHITE && at(col, row + 1) === WHITE) line += platte.WHITE_ALL;else if (at(col, row) === WHITE && at(col, row + 1) === BLACK) line += platte.WHITE_BLACK;else if (at(col, row) === BLACK && at(col, row + 1) === WHITE) line += platte.BLACK_WHITE;else line += platte.BLACK_ALL;\n    }\n    lines.push(line);\n    line = \"\";\n  }\n  return lines.join(\"\\n\");\n}\nfunction renderSVG(data, options = {}) {\n  const result = encode(data, options);\n  const {\n    pixelSize = 10,\n    whiteColor = \"white\",\n    blackColor = \"black\"\n  } = options;\n  const height = result.size * pixelSize;\n  const width = result.size * pixelSize;\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\">`;\n  const pathes = [];\n  for (let row = 0; row < result.size; row++) {\n    for (let col = 0; col < result.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (result.data[row][col]) pathes.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n    }\n  }\n  svg += `<rect fill=\"${whiteColor}\" width=\"${width}\" height=\"${height}\"/>`;\n  svg += `<path fill=\"${blackColor}\" d=\"${pathes.join(\"\")}\"/>`;\n  svg += \"</svg>\";\n  return svg;\n}\nexport { QrCodeDataType, encode, renderANSI, renderSVG, renderUnicode, renderUnicodeCompact };","map":{"version":3,"names":["QrCodeDataType","QrCodeDataType2","__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","LOW","MEDIUM","QUARTILE","HIGH","EccMap","L","M","Q","H","NUMERIC_REGEX","ALPHANUMERIC_REGEX","ALPHANUMERIC_CHARSET","MIN_VERSION","MAX_VERSION","PENALTY_N1","PENALTY_N2","PENALTY_N3","PENALTY_N4","ECC_CODEWORDS_PER_BLOCK","NUM_ERROR_CORRECTION_BLOCKS","QrCode","constructor","version","ecc","dataCodewords","msk","RangeError","size","row","Array","from","length","i","modules","push","slice","types","map","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","mask","getModule","x","y","setFunctionModule","Timing","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","data","rem","bits","getBit","color","a","b","Math","floor","dy","dx","dist","max","abs","xx","yy","Position","Alignment","isDark","type","Function","ver","ecl","getNumDataCodewords","numBlocks","blockEccLen","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","reedSolomonComputeRemainder","concat","result","forEach","block","right","vert","upward","invert","Error","runColor","runX","runHistory","finderPenaltyAddHistory","finderPenaltyCountPatterns","finderPenaltyTerminateAndCount","runY","dark","reduce","sum","total","ceil","step","pos","splice","n","core","currentRunColor","currentRunLength","pop","unshift","appendBits","val","len","bb","QrSegment","mode","numChars","bitData","getData","MODE_NUMERIC","MODE_ALPHANUMERIC","MODE_BYTE","numCharCountBits","makeBytes","makeNumeric","digits","isNumeric","min","Number","parseInt","substring","makeAlphanumeric","text","isAlphanumeric","temp","indexOf","charAt","makeSegments","toUtf8ByteArray","test","getTotalBits","segs","seg","ccbits","POSITIVE_INFINITY","str","encodeURI","charCodeAt","degree","root","reedSolomonMultiply","divisor","_","factor","shift","coef","z","encodeSegments","minVersion","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","usedBits","newEcl","dataCapacityBits","padByte","encode","options","boostEcc","maskPattern","border","segment","isArray","qr","addBorder","mod","onEncoded","input","newSize","Border","getDataAt","defaults","renderUnicode","whiteChar","blackChar","join","renderANSI","renderUnicodeCompact","platte","WHITE_ALL","WHITE_BLACK","BLACK_WHITE","BLACK_ALL","WHITE","BLACK","at","lines","line","col","renderSVG","pixelSize","whiteColor","blackColor","height","width","svg","pathes"],"sources":["/Users/macbook/developer/2025/2026/node_modules/uqr/dist/index.mjs"],"sourcesContent":["var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {\n  QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n  QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n  QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n  QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n  QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n  QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n  return QrCodeDataType2;\n})(QrCodeDataType || {});\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst LOW = [0, 1];\nconst MEDIUM = [1, 0];\nconst QUARTILE = [2, 3];\nconst HIGH = [3, 2];\nconst EccMap = {\n  L: LOW,\n  M: MEDIUM,\n  Q: QUARTILE,\n  H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  // High\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  // High\n];\nclass QrCode {\n  /* -- Constructor (low level) and fields -- */\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  constructor(version, ecc, dataCodewords, msk) {\n    this.version = version;\n    this.ecc = ecc;\n    /* -- Fields -- */\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    __publicField(this, \"size\");\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    __publicField(this, \"mask\");\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    __publicField(this, \"modules\", []);\n    __publicField(this, \"types\", []);\n    if (version < MIN_VERSION || version > MAX_VERSION)\n      throw new RangeError(\"Version value out of range\");\n    if (msk < -1 || msk > 7)\n      throw new RangeError(\"Mask value out of range\");\n    this.size = version * 4 + 17;\n    const row = Array.from({ length: this.size }, () => false);\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice());\n      this.types.push(row.map(() => 0));\n    }\n    this.drawFunctionPatterns();\n    const allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n    if (msk === -1) {\n      let minPenalty = 1e9;\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i);\n        this.drawFormatBits(i);\n        const penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = i;\n          minPenalty = penalty;\n        }\n        this.applyMask(i);\n      }\n    }\n    this.mask = msk;\n    this.applyMask(msk);\n    this.drawFormatBits(msk);\n  }\n  /* -- Accessor methods -- */\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  getModule(x, y) {\n    return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n  }\n  /* -- Private helper methods for constructor: Drawing function modules -- */\n  // Reads this object's version field, and draws and marks all function modules.\n  drawFunctionPatterns() {\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n      this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n    }\n    this.drawFinderPattern(3, 3);\n    this.drawFinderPattern(this.size - 4, 3);\n    this.drawFinderPattern(3, this.size - 4);\n    const alignPatPos = this.getAlignmentPatternPositions();\n    const numAlign = alignPatPos.length;\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n      }\n    }\n    this.drawFormatBits(0);\n    this.drawVersion();\n  }\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  drawFormatBits(mask) {\n    const data = this.ecc[1] << 3 | mask;\n    let rem = data;\n    for (let i = 0; i < 10; i++)\n      rem = rem << 1 ^ (rem >>> 9) * 1335;\n    const bits = (data << 10 | rem) ^ 21522;\n    for (let i = 0; i <= 5; i++)\n      this.setFunctionModule(8, i, getBit(bits, i));\n    this.setFunctionModule(8, 7, getBit(bits, 6));\n    this.setFunctionModule(8, 8, getBit(bits, 7));\n    this.setFunctionModule(7, 8, getBit(bits, 8));\n    for (let i = 9; i < 15; i++)\n      this.setFunctionModule(14 - i, 8, getBit(bits, i));\n    for (let i = 0; i < 8; i++)\n      this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n    for (let i = 8; i < 15; i++)\n      this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n    this.setFunctionModule(8, this.size - 8, true);\n  }\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  drawVersion() {\n    if (this.version < 7)\n      return;\n    let rem = this.version;\n    for (let i = 0; i < 12; i++)\n      rem = rem << 1 ^ (rem >>> 11) * 7973;\n    const bits = this.version << 12 | rem;\n    for (let i = 0; i < 18; i++) {\n      const color = getBit(bits, i);\n      const a = this.size - 11 + i % 3;\n      const b = Math.floor(i / 3);\n      this.setFunctionModule(a, b, color);\n      this.setFunctionModule(b, a, color);\n    }\n  }\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  drawFinderPattern(x, y) {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist = Math.max(Math.abs(dx), Math.abs(dy));\n        const xx = x + dx;\n        const yy = y + dy;\n        if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)\n          this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n      }\n    }\n  }\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  drawAlignmentPattern(x, y) {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        this.setFunctionModule(\n          x + dx,\n          y + dy,\n          Math.max(Math.abs(dx), Math.abs(dy)) !== 1,\n          QrCodeDataType.Alignment\n        );\n      }\n    }\n  }\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {\n    this.modules[y][x] = isDark;\n    this.types[y][x] = type;\n  }\n  /* -- Private helper methods for constructor: Codewords and masking -- */\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  addEccAndInterleave(data) {\n    const ver = this.version;\n    const ecl = this.ecc;\n    if (data.length !== getNumDataCodewords(ver, ecl))\n      throw new RangeError(\"Invalid argument\");\n    const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n    const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n    const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n    const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n    const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n    const blocks = [];\n    const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n      k += dat.length;\n      const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n      if (i < numShortBlocks)\n        dat.push(0);\n      blocks.push(dat.concat(ecc));\n    }\n    const result = [];\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks)\n          result.push(block[i]);\n      });\n    }\n    return result;\n  }\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  drawCodewords(data) {\n    if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8))\n      throw new RangeError(\"Invalid argument\");\n    let i = 0;\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      if (right === 6)\n        right = 5;\n      for (let vert = 0; vert < this.size; vert++) {\n        for (let j = 0; j < 2; j++) {\n          const x = right - j;\n          const upward = (right + 1 & 2) === 0;\n          const y = upward ? this.size - 1 - vert : vert;\n          if (!this.types[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n            i++;\n          }\n        }\n      }\n    }\n  }\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  applyMask(mask) {\n    if (mask < 0 || mask > 7)\n      throw new RangeError(\"Mask value out of range\");\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert;\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 === 0;\n            break;\n          case 1:\n            invert = y % 2 === 0;\n            break;\n          case 2:\n            invert = x % 3 === 0;\n            break;\n          case 3:\n            invert = (x + y) % 3 === 0;\n            break;\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n            break;\n          case 5:\n            invert = x * y % 2 + x * y % 3 === 0;\n            break;\n          case 6:\n            invert = (x * y % 2 + x * y % 3) % 2 === 0;\n            break;\n          case 7:\n            invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n            break;\n          default:\n            throw new Error(\"Unreachable\");\n        }\n        if (!this.types[y][x] && invert)\n          this.modules[y][x] = !this.modules[y][x];\n      }\n    }\n  }\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  getPenaltyScore() {\n    let result = 0;\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false;\n      let runX = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] === runColor) {\n          runX++;\n          if (runX === 5)\n            result += PENALTY_N1;\n          else if (runX > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runX = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n    }\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false;\n      let runY = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] === runColor) {\n          runY++;\n          if (runY === 5)\n            result += PENALTY_N1;\n          else if (runY > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runY = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n    }\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color = this.modules[y][x];\n        if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1])\n          result += PENALTY_N2;\n      }\n    }\n    let dark = 0;\n    for (const row of this.modules)\n      dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n    const total = this.size * this.size;\n    const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n    result += k * PENALTY_N4;\n    return result;\n  }\n  /* -- Private helper functions -- */\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  getAlignmentPatternPositions() {\n    if (this.version === 1) {\n      return [];\n    } else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      const result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n        result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  finderPenaltyCountPatterns(runHistory) {\n    const n = runHistory[1];\n    const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n    return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n  }\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n    if (currentRunColor) {\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      currentRunLength = 0;\n    }\n    currentRunLength += this.size;\n    this.finderPenaltyAddHistory(currentRunLength, runHistory);\n    return this.finderPenaltyCountPatterns(runHistory);\n  }\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  finderPenaltyAddHistory(currentRunLength, runHistory) {\n    if (runHistory[0] === 0)\n      currentRunLength += this.size;\n    runHistory.pop();\n    runHistory.unshift(currentRunLength);\n  }\n}\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len !== 0)\n    throw new RangeError(\"Value out of range\");\n  for (let i = len - 1; i >= 0; i--)\n    bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n  return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  constructor(mode, numChars, bitData) {\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0)\n      throw new RangeError(\"Invalid argument\");\n    this.bitData = bitData.slice();\n  }\n  /* -- Methods -- */\n  // Returns a new copy of the data bits of this segment.\n  getData() {\n    return this.bitData.slice();\n  }\n}\nconst MODE_NUMERIC = [1, 10, 12, 14];\nconst MODE_ALPHANUMERIC = [2, 9, 11, 13];\nconst MODE_BYTE = [4, 8, 16, 16];\nfunction numCharCountBits(mode, ver) {\n  return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n  const bb = [];\n  for (const b of data)\n    appendBits(b, 8, bb);\n  return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n  if (!isNumeric(digits))\n    throw new RangeError(\"String contains non-numeric characters\");\n  const bb = [];\n  for (let i = 0; i < digits.length; ) {\n    const n = Math.min(digits.length - i, 3);\n    appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n    i += n;\n  }\n  return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n  if (!isAlphanumeric(text))\n    throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n  const bb = [];\n  let i;\n  for (i = 0; i + 2 <= text.length; i += 2) {\n    let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n    temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n    appendBits(temp, 11, bb);\n  }\n  if (i < text.length)\n    appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n  return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n  if (text === \"\")\n    return [];\n  else if (isNumeric(text))\n    return [makeNumeric(text)];\n  else if (isAlphanumeric(text))\n    return [makeAlphanumeric(text)];\n  else\n    return [makeBytes(toUtf8ByteArray(text))];\n}\nfunction isNumeric(text) {\n  return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n  return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n  let result = 0;\n  for (const seg of segs) {\n    const ccbits = numCharCountBits(seg.mode, version);\n    if (seg.numChars >= 1 << ccbits)\n      return Number.POSITIVE_INFINITY;\n    result += 4 + ccbits + seg.bitData.length;\n  }\n  return result;\n}\nfunction toUtf8ByteArray(str) {\n  str = encodeURI(str);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \"%\") {\n      result.push(str.charCodeAt(i));\n    } else {\n      result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n      i += 2;\n    }\n  }\n  return result;\n}\nfunction getNumRawDataModules(ver) {\n  if (ver < MIN_VERSION || ver > MAX_VERSION)\n    throw new RangeError(\"Version number out of range\");\n  let result = (16 * ver + 128) * ver + 64;\n  if (ver >= 2) {\n    const numAlign = Math.floor(ver / 7) + 2;\n    result -= (25 * numAlign - 10) * numAlign - 55;\n    if (ver >= 7)\n      result -= 36;\n  }\n  return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n  return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n  if (degree < 1 || degree > 255)\n    throw new RangeError(\"Degree out of range\");\n  const result = [];\n  for (let i = 0; i < degree - 1; i++)\n    result.push(0);\n  result.push(1);\n  let root = 1;\n  for (let i = 0; i < degree; i++) {\n    for (let j = 0; j < result.length; j++) {\n      result[j] = reedSolomonMultiply(result[j], root);\n      if (j + 1 < result.length)\n        result[j] ^= result[j + 1];\n    }\n    root = reedSolomonMultiply(root, 2);\n  }\n  return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n  const result = divisor.map((_) => 0);\n  for (const b of data) {\n    const factor = b ^ result.shift();\n    result.push(0);\n    divisor.forEach((coef, i) => result[i] ^= reedSolomonMultiply(coef, factor));\n  }\n  return result;\n}\nfunction reedSolomonMultiply(x, y) {\n  if (x >>> 8 !== 0 || y >>> 8 !== 0)\n    throw new RangeError(\"Byte out of range\");\n  let z = 0;\n  for (let i = 7; i >= 0; i--) {\n    z = z << 1 ^ (z >>> 7) * 285;\n    z ^= (y >>> i & 1) * x;\n  }\n  return z;\n}\nfunction encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n  if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)\n    throw new RangeError(\"Invalid value\");\n  let version;\n  let dataUsedBits;\n  for (version = minVersion; ; version++) {\n    const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n    const usedBits = getTotalBits(segs, version);\n    if (usedBits <= dataCapacityBits2) {\n      dataUsedBits = usedBits;\n      break;\n    }\n    if (version >= maxVersion)\n      throw new RangeError(\"Data too long\");\n  }\n  for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {\n    if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8)\n      ecl = newEcl;\n  }\n  const bb = [];\n  for (const seg of segs) {\n    appendBits(seg.mode[0], 4, bb);\n    appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n    for (const b of seg.getData())\n      bb.push(b);\n  }\n  const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n  appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n  appendBits(0, (8 - bb.length % 8) % 8, bb);\n  for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n    appendBits(padByte, 8, bb);\n  const dataCodewords = Array.from({ length: Math.ceil(bb.length / 8) }, () => 0);\n  bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n  return new QrCode(version, ecl, dataCodewords, mask);\n}\n\nfunction encode(data, options) {\n  const {\n    ecc = \"L\",\n    boostEcc = false,\n    minVersion = 1,\n    maxVersion = 40,\n    maskPattern = -1,\n    border = 1\n  } = options || {};\n  const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [makeBytes(data)] : void 0;\n  if (!segment)\n    throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data}`);\n  const qr = encodeSegments(\n    segment,\n    EccMap[ecc],\n    minVersion,\n    maxVersion,\n    maskPattern,\n    boostEcc\n  );\n  const result = addBorder({\n    version: qr.version,\n    maskPattern: qr.mask,\n    size: qr.size,\n    data: qr.modules,\n    types: qr.types\n  }, border);\n  if (options?.invert)\n    result.data = result.data.map((row) => row.map((mod) => !mod));\n  options?.onEncoded?.(result);\n  return result;\n}\nfunction addBorder(input, border = 1) {\n  if (!border)\n    return input;\n  const { size } = input;\n  const newSize = size + border * 2;\n  input.size = newSize;\n  input.data.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(false);\n      row.push(false);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.data.unshift(Array.from({ length: newSize }, (_) => false));\n    input.data.push(Array.from({ length: newSize }, (_) => false));\n  }\n  const b = QrCodeDataType.Border;\n  input.types.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(b);\n      row.push(b);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.types.unshift(Array.from({ length: newSize }, (_) => b));\n    input.types.push(Array.from({ length: newSize }, (_) => b));\n  }\n  return input;\n}\nfunction getDataAt(data, x, y, defaults = false) {\n  if (x < 0 || y < 0 || x >= data.length || y >= data.length)\n    return defaults;\n  return data[y][x];\n}\n\nfunction renderUnicode(data, options = {}) {\n  const {\n    whiteChar = \"\\u2588\",\n    blackChar = \"\\u2591\"\n  } = options;\n  const result = encode(data, options);\n  return result.data.map((row) => {\n    return row.map((mod) => mod ? blackChar : whiteChar).join(\"\");\n  }).join(\"\\n\");\n}\nfunction renderANSI(data, options = {}) {\n  return renderUnicode(data, {\n    ...options,\n    blackChar: \"\\x1B[40m\\u3000\\x1B[0m\",\n    whiteChar: \"\\x1B[47m\\u3000\\x1B[0m\"\n  });\n}\nfunction renderUnicodeCompact(data, options = {}) {\n  const platte = {\n    WHITE_ALL: \"\\u2588\",\n    WHITE_BLACK: \"\\u2580\",\n    BLACK_WHITE: \"\\u2584\",\n    BLACK_ALL: \" \"\n  };\n  const result = encode(data, options);\n  const WHITE = false;\n  const BLACK = true;\n  const at = (x, y) => getDataAt(result.data, x, y, true);\n  const lines = [];\n  let line = \"\";\n  for (let row = 0; row < result.size; row += 2) {\n    for (let col = 0; col < result.size; col++) {\n      if (at(col, row) === WHITE && at(col, row + 1) === WHITE)\n        line += platte.WHITE_ALL;\n      else if (at(col, row) === WHITE && at(col, row + 1) === BLACK)\n        line += platte.WHITE_BLACK;\n      else if (at(col, row) === BLACK && at(col, row + 1) === WHITE)\n        line += platte.BLACK_WHITE;\n      else\n        line += platte.BLACK_ALL;\n    }\n    lines.push(line);\n    line = \"\";\n  }\n  return lines.join(\"\\n\");\n}\n\nfunction renderSVG(data, options = {}) {\n  const result = encode(data, options);\n  const {\n    pixelSize = 10,\n    whiteColor = \"white\",\n    blackColor = \"black\"\n  } = options;\n  const height = result.size * pixelSize;\n  const width = result.size * pixelSize;\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\">`;\n  const pathes = [];\n  for (let row = 0; row < result.size; row++) {\n    for (let col = 0; col < result.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (result.data[row][col])\n        pathes.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n    }\n  }\n  svg += `<rect fill=\"${whiteColor}\" width=\"${width}\" height=\"${height}\"/>`;\n  svg += `<path fill=\"${blackColor}\" d=\"${pathes.join(\"\")}\"/>`;\n  svg += \"</svg>\";\n  return svg;\n}\n\nexport { QrCodeDataType, encode, renderANSI, renderSVG, renderUnicode, renderUnicodeCompact };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}