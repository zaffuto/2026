{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, dataAttr, getEventTarget, visuallyHiddenStyle, trackPress, trackFormControl, dispatchInputCheckedEvent } from '@zag-js/dom-query';\nimport { isFocusVisible, trackFocusVisible } from '@zag-js/focus-visible';\nimport { createMachine, guards } from '@zag-js/core';\nimport { createSplitProps, compact, isEqual } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/switch.anatomy.ts\nvar anatomy = createAnatomy(\"switch\").parts(\"root\", \"label\", \"control\", \"thumb\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: ctx => ctx.ids?.root ?? `switch:${ctx.id}`,\n  getLabelId: ctx => ctx.ids?.label ?? `switch:${ctx.id}:label`,\n  getThumbId: ctx => ctx.ids?.thumb ?? `switch:${ctx.id}:thumb`,\n  getControlId: ctx => ctx.ids?.control ?? `switch:${ctx.id}:control`,\n  getHiddenInputId: ctx => ctx.ids?.hiddenInput ?? `switch:${ctx.id}:input`,\n  getRootEl: ctx => dom.getById(ctx, dom.getRootId(ctx)),\n  getHiddenInputEl: ctx => dom.getById(ctx, dom.getHiddenInputId(ctx))\n});\n\n// src/switch.connect.ts\nfunction connect(state, send, normalize) {\n  const disabled = state.context.isDisabled;\n  const readOnly = state.context.readOnly;\n  const checked = state.context.checked;\n  const focused = !disabled && state.context.focused;\n  const focusVisible = !disabled && state.context.focusVisible;\n  const dataAttrs = {\n    \"data-active\": dataAttr(state.context.active),\n    \"data-focus\": dataAttr(focused),\n    \"data-focus-visible\": dataAttr(focusVisible),\n    \"data-readonly\": dataAttr(readOnly),\n    \"data-hover\": dataAttr(state.context.hovered),\n    \"data-disabled\": dataAttr(disabled),\n    \"data-state\": state.context.checked ? \"checked\" : \"unchecked\",\n    \"data-invalid\": dataAttr(state.context.invalid)\n  };\n  return {\n    checked,\n    disabled,\n    focused,\n    setChecked(checked2) {\n      send({\n        type: \"CHECKED.SET\",\n        checked: checked2,\n        isTrusted: false\n      });\n    },\n    toggleChecked() {\n      send({\n        type: \"CHECKED.TOGGLE\",\n        checked,\n        isTrusted: false\n      });\n    },\n    getRootProps() {\n      return normalize.label({\n        ...parts.root.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onPointerMove() {\n          if (disabled) return;\n          send({\n            type: \"CONTEXT.SET\",\n            context: {\n              hovered: true\n            }\n          });\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send({\n            type: \"CONTEXT.SET\",\n            context: {\n              hovered: false\n            }\n          });\n        },\n        onClick(event) {\n          if (disabled) return;\n          const target = getEventTarget(event);\n          if (target === dom.getHiddenInputEl(state.context)) {\n            event.stopPropagation();\n          }\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context)\n      });\n    },\n    getThumbProps() {\n      return normalize.element({\n        ...parts.thumb.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getThumbId(state.context),\n        \"aria-hidden\": true\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context),\n        \"aria-hidden\": true\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"checkbox\",\n        required: state.context.required,\n        defaultChecked: checked,\n        disabled,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-invalid\": state.context.invalid,\n        name: state.context.name,\n        form: state.context.form,\n        value: state.context.value,\n        style: visuallyHiddenStyle,\n        onFocus() {\n          const focusVisible2 = isFocusVisible();\n          send({\n            type: \"CONTEXT.SET\",\n            context: {\n              focused: true,\n              focusVisible: focusVisible2\n            }\n          });\n        },\n        onBlur() {\n          send({\n            type: \"CONTEXT.SET\",\n            context: {\n              focused: false,\n              focusVisible: false\n            }\n          });\n        },\n        onClick(event) {\n          if (readOnly) {\n            event.preventDefault();\n            return;\n          }\n          const checked2 = event.currentTarget.checked;\n          send({\n            type: \"CHECKED.SET\",\n            checked: checked2,\n            isTrusted: true\n          });\n        }\n      });\n    }\n  };\n}\nvar {\n  not\n} = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine({\n    id: \"switch\",\n    initial: \"ready\",\n    context: {\n      checked: false,\n      label: \"switch\",\n      value: \"on\",\n      disabled: false,\n      ...ctx,\n      fieldsetDisabled: false,\n      focusVisible: false\n    },\n    computed: {\n      isDisabled: ctx2 => ctx2.disabled || ctx2.fieldsetDisabled\n    },\n    watch: {\n      disabled: \"removeFocusIfNeeded\",\n      checked: \"syncInputElement\"\n    },\n    activities: [\"trackFormControlState\", \"trackPressEvent\", \"trackFocusVisible\"],\n    on: {\n      \"CHECKED.TOGGLE\": [{\n        guard: not(\"isTrusted\"),\n        actions: [\"toggleChecked\", \"dispatchChangeEvent\"]\n      }, {\n        actions: [\"toggleChecked\"]\n      }],\n      \"CHECKED.SET\": [{\n        guard: not(\"isTrusted\"),\n        actions: [\"setChecked\", \"dispatchChangeEvent\"]\n      }, {\n        actions: [\"setChecked\"]\n      }],\n      \"CONTEXT.SET\": {\n        actions: [\"setContext\"]\n      }\n    },\n    states: {\n      ready: {}\n    }\n  }, {\n    guards: {\n      isTrusted: (_ctx, evt) => !!evt.isTrusted\n    },\n    activities: {\n      trackPressEvent(ctx2) {\n        if (ctx2.isDisabled) return;\n        return trackPress({\n          pointerNode: dom.getRootEl(ctx2),\n          keyboardNode: dom.getHiddenInputEl(ctx2),\n          isValidKey: event => event.key === \" \",\n          onPress: () => ctx2.active = false,\n          onPressStart: () => ctx2.active = true,\n          onPressEnd: () => ctx2.active = false\n        });\n      },\n      trackFocusVisible(ctx2) {\n        if (ctx2.isDisabled) return;\n        return trackFocusVisible({\n          root: dom.getRootNode(ctx2)\n        });\n      },\n      trackFormControlState(ctx2, _evt, {\n        send,\n        initialContext\n      }) {\n        return trackFormControl(dom.getHiddenInputEl(ctx2), {\n          onFieldsetDisabledChange(disabled) {\n            ctx2.fieldsetDisabled = disabled;\n          },\n          onFormReset() {\n            send({\n              type: \"CHECKED.SET\",\n              checked: !!initialContext.checked,\n              src: \"form-reset\"\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      setContext(ctx2, evt) {\n        Object.assign(ctx2, evt.context);\n      },\n      syncInputElement(ctx2) {\n        const inputEl = dom.getHiddenInputEl(ctx2);\n        if (!inputEl) return;\n        inputEl.checked = !!ctx2.checked;\n      },\n      removeFocusIfNeeded(ctx2) {\n        if (ctx2.disabled && ctx2.focused) {\n          ctx2.focused = false;\n        }\n      },\n      setChecked(ctx2, evt) {\n        set.checked(ctx2, evt.checked);\n      },\n      toggleChecked(ctx2, _evt) {\n        set.checked(ctx2, !ctx2.checked);\n      },\n      dispatchChangeEvent(ctx2) {\n        const inputEl = dom.getHiddenInputEl(ctx2);\n        dispatchInputCheckedEvent(inputEl, {\n          checked: ctx2.checked\n        });\n      }\n    }\n  });\n}\nvar invoke = {\n  change: ctx => {\n    ctx.onCheckedChange?.({\n      checked: ctx.checked\n    });\n  }\n};\nvar set = {\n  checked: (ctx, checked) => {\n    if (isEqual(ctx.checked, checked)) return;\n    ctx.checked = checked;\n    invoke.change(ctx);\n  }\n};\nvar props = createProps()([\"checked\", \"dir\", \"disabled\", \"form\", \"getRootNode\", \"id\", \"ids\", \"invalid\", \"label\", \"name\", \"onCheckedChange\", \"readOnly\", \"required\", \"value\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","createScope","dataAttr","getEventTarget","visuallyHiddenStyle","trackPress","trackFormControl","dispatchInputCheckedEvent","isFocusVisible","trackFocusVisible","createMachine","guards","createSplitProps","compact","isEqual","createProps","anatomy","parts","build","dom","getRootId","ctx","ids","root","id","getLabelId","label","getThumbId","thumb","getControlId","control","getHiddenInputId","hiddenInput","getRootEl","getById","getHiddenInputEl","connect","state","send","normalize","disabled","context","isDisabled","readOnly","checked","focused","focusVisible","dataAttrs","active","hovered","invalid","setChecked","checked2","type","isTrusted","toggleChecked","getRootProps","attrs","dir","htmlFor","onPointerMove","onPointerLeave","onClick","event","target","stopPropagation","getLabelProps","element","getThumbProps","getControlProps","getHiddenInputProps","input","required","defaultChecked","name","form","value","style","onFocus","focusVisible2","onBlur","preventDefault","currentTarget","not","machine","userContext","initial","fieldsetDisabled","computed","ctx2","watch","activities","on","guard","actions","states","ready","_ctx","evt","trackPressEvent","pointerNode","keyboardNode","isValidKey","key","onPress","onPressStart","onPressEnd","getRootNode","trackFormControlState","_evt","initialContext","onFieldsetDisabledChange","onFormReset","src","setContext","Object","assign","syncInputElement","inputEl","removeFocusIfNeeded","set","dispatchChangeEvent","invoke","change","onCheckedChange","props","splitProps"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@zag-js/switch/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { createScope, dataAttr, getEventTarget, visuallyHiddenStyle, trackPress, trackFormControl, dispatchInputCheckedEvent } from '@zag-js/dom-query';\nimport { isFocusVisible, trackFocusVisible } from '@zag-js/focus-visible';\nimport { createMachine, guards } from '@zag-js/core';\nimport { createSplitProps, compact, isEqual } from '@zag-js/utils';\nimport { createProps } from '@zag-js/types';\n\n// src/switch.anatomy.ts\nvar anatomy = createAnatomy(\"switch\").parts(\"root\", \"label\", \"control\", \"thumb\");\nvar parts = anatomy.build();\nvar dom = createScope({\n  getRootId: (ctx) => ctx.ids?.root ?? `switch:${ctx.id}`,\n  getLabelId: (ctx) => ctx.ids?.label ?? `switch:${ctx.id}:label`,\n  getThumbId: (ctx) => ctx.ids?.thumb ?? `switch:${ctx.id}:thumb`,\n  getControlId: (ctx) => ctx.ids?.control ?? `switch:${ctx.id}:control`,\n  getHiddenInputId: (ctx) => ctx.ids?.hiddenInput ?? `switch:${ctx.id}:input`,\n  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getHiddenInputEl: (ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx))\n});\n\n// src/switch.connect.ts\nfunction connect(state, send, normalize) {\n  const disabled = state.context.isDisabled;\n  const readOnly = state.context.readOnly;\n  const checked = state.context.checked;\n  const focused = !disabled && state.context.focused;\n  const focusVisible = !disabled && state.context.focusVisible;\n  const dataAttrs = {\n    \"data-active\": dataAttr(state.context.active),\n    \"data-focus\": dataAttr(focused),\n    \"data-focus-visible\": dataAttr(focusVisible),\n    \"data-readonly\": dataAttr(readOnly),\n    \"data-hover\": dataAttr(state.context.hovered),\n    \"data-disabled\": dataAttr(disabled),\n    \"data-state\": state.context.checked ? \"checked\" : \"unchecked\",\n    \"data-invalid\": dataAttr(state.context.invalid)\n  };\n  return {\n    checked,\n    disabled,\n    focused,\n    setChecked(checked2) {\n      send({ type: \"CHECKED.SET\", checked: checked2, isTrusted: false });\n    },\n    toggleChecked() {\n      send({ type: \"CHECKED.TOGGLE\", checked, isTrusted: false });\n    },\n    getRootProps() {\n      return normalize.label({\n        ...parts.root.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getRootId(state.context),\n        htmlFor: dom.getHiddenInputId(state.context),\n        onPointerMove() {\n          if (disabled) return;\n          send({ type: \"CONTEXT.SET\", context: { hovered: true } });\n        },\n        onPointerLeave() {\n          if (disabled) return;\n          send({ type: \"CONTEXT.SET\", context: { hovered: false } });\n        },\n        onClick(event) {\n          if (disabled) return;\n          const target = getEventTarget(event);\n          if (target === dom.getHiddenInputEl(state.context)) {\n            event.stopPropagation();\n          }\n        }\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getLabelId(state.context)\n      });\n    },\n    getThumbProps() {\n      return normalize.element({\n        ...parts.thumb.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getThumbId(state.context),\n        \"aria-hidden\": true\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        ...dataAttrs,\n        dir: state.context.dir,\n        id: dom.getControlId(state.context),\n        \"aria-hidden\": true\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        id: dom.getHiddenInputId(state.context),\n        type: \"checkbox\",\n        required: state.context.required,\n        defaultChecked: checked,\n        disabled,\n        \"aria-labelledby\": dom.getLabelId(state.context),\n        \"aria-invalid\": state.context.invalid,\n        name: state.context.name,\n        form: state.context.form,\n        value: state.context.value,\n        style: visuallyHiddenStyle,\n        onFocus() {\n          const focusVisible2 = isFocusVisible();\n          send({ type: \"CONTEXT.SET\", context: { focused: true, focusVisible: focusVisible2 } });\n        },\n        onBlur() {\n          send({ type: \"CONTEXT.SET\", context: { focused: false, focusVisible: false } });\n        },\n        onClick(event) {\n          if (readOnly) {\n            event.preventDefault();\n            return;\n          }\n          const checked2 = event.currentTarget.checked;\n          send({ type: \"CHECKED.SET\", checked: checked2, isTrusted: true });\n        }\n      });\n    }\n  };\n}\nvar { not } = guards;\nfunction machine(userContext) {\n  const ctx = compact(userContext);\n  return createMachine(\n    {\n      id: \"switch\",\n      initial: \"ready\",\n      context: {\n        checked: false,\n        label: \"switch\",\n        value: \"on\",\n        disabled: false,\n        ...ctx,\n        fieldsetDisabled: false,\n        focusVisible: false\n      },\n      computed: {\n        isDisabled: (ctx2) => ctx2.disabled || ctx2.fieldsetDisabled\n      },\n      watch: {\n        disabled: \"removeFocusIfNeeded\",\n        checked: \"syncInputElement\"\n      },\n      activities: [\"trackFormControlState\", \"trackPressEvent\", \"trackFocusVisible\"],\n      on: {\n        \"CHECKED.TOGGLE\": [\n          {\n            guard: not(\"isTrusted\"),\n            actions: [\"toggleChecked\", \"dispatchChangeEvent\"]\n          },\n          {\n            actions: [\"toggleChecked\"]\n          }\n        ],\n        \"CHECKED.SET\": [\n          {\n            guard: not(\"isTrusted\"),\n            actions: [\"setChecked\", \"dispatchChangeEvent\"]\n          },\n          {\n            actions: [\"setChecked\"]\n          }\n        ],\n        \"CONTEXT.SET\": {\n          actions: [\"setContext\"]\n        }\n      },\n      states: {\n        ready: {}\n      }\n    },\n    {\n      guards: {\n        isTrusted: (_ctx, evt) => !!evt.isTrusted\n      },\n      activities: {\n        trackPressEvent(ctx2) {\n          if (ctx2.isDisabled) return;\n          return trackPress({\n            pointerNode: dom.getRootEl(ctx2),\n            keyboardNode: dom.getHiddenInputEl(ctx2),\n            isValidKey: (event) => event.key === \" \",\n            onPress: () => ctx2.active = false,\n            onPressStart: () => ctx2.active = true,\n            onPressEnd: () => ctx2.active = false\n          });\n        },\n        trackFocusVisible(ctx2) {\n          if (ctx2.isDisabled) return;\n          return trackFocusVisible({ root: dom.getRootNode(ctx2) });\n        },\n        trackFormControlState(ctx2, _evt, { send, initialContext }) {\n          return trackFormControl(dom.getHiddenInputEl(ctx2), {\n            onFieldsetDisabledChange(disabled) {\n              ctx2.fieldsetDisabled = disabled;\n            },\n            onFormReset() {\n              send({ type: \"CHECKED.SET\", checked: !!initialContext.checked, src: \"form-reset\" });\n            }\n          });\n        }\n      },\n      actions: {\n        setContext(ctx2, evt) {\n          Object.assign(ctx2, evt.context);\n        },\n        syncInputElement(ctx2) {\n          const inputEl = dom.getHiddenInputEl(ctx2);\n          if (!inputEl) return;\n          inputEl.checked = !!ctx2.checked;\n        },\n        removeFocusIfNeeded(ctx2) {\n          if (ctx2.disabled && ctx2.focused) {\n            ctx2.focused = false;\n          }\n        },\n        setChecked(ctx2, evt) {\n          set.checked(ctx2, evt.checked);\n        },\n        toggleChecked(ctx2, _evt) {\n          set.checked(ctx2, !ctx2.checked);\n        },\n        dispatchChangeEvent(ctx2) {\n          const inputEl = dom.getHiddenInputEl(ctx2);\n          dispatchInputCheckedEvent(inputEl, { checked: ctx2.checked });\n        }\n      }\n    }\n  );\n}\nvar invoke = {\n  change: (ctx) => {\n    ctx.onCheckedChange?.({ checked: ctx.checked });\n  }\n};\nvar set = {\n  checked: (ctx, checked) => {\n    if (isEqual(ctx.checked, checked)) return;\n    ctx.checked = checked;\n    invoke.change(ctx);\n  }\n};\nvar props = createProps()([\n  \"checked\",\n  \"dir\",\n  \"disabled\",\n  \"form\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"invalid\",\n  \"label\",\n  \"name\",\n  \"onCheckedChange\",\n  \"readOnly\",\n  \"required\",\n  \"value\"\n]);\nvar splitProps = createSplitProps(props);\n\nexport { anatomy, connect, machine, props, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}