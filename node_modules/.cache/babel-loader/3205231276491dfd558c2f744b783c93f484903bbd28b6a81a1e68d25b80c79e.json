{"ast":null,"code":"// src/normalize-span.ts\nvar normalizeSpan = (spans, len) => {\n  const result = [];\n  const append = (start, end, match) => {\n    if (end - start > 0) result.push({\n      start,\n      end,\n      match\n    });\n  };\n  if (spans.length === 0) {\n    append(0, len, false);\n  } else {\n    let lastIndex = 0;\n    for (const chunk of spans) {\n      append(lastIndex, chunk.start, false);\n      append(chunk.start, chunk.end, true);\n      lastIndex = chunk.end;\n    }\n    append(lastIndex, len, false);\n  }\n  return result;\n};\n\n// src/highlight-first.ts\nfunction highlightFirst(props) {\n  const {\n    text,\n    query,\n    ignoreCase\n  } = props;\n  const searchText = ignoreCase ? text.toLowerCase() : text;\n  const searchQuery = ignoreCase ? typeof query === \"string\" ? query.toLowerCase() : query : query;\n  const start = typeof searchText === \"string\" ? searchText.indexOf(searchQuery) : -1;\n  if (start === -1) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n  const end = start + searchQuery.length;\n  const spans = [{\n    start,\n    end\n  }];\n  return normalizeSpan(spans, text.length).map(chunk => ({\n    text: text.slice(chunk.start, chunk.end),\n    match: !!chunk.match\n  }));\n}\n\n// src/highlight-multiple.ts\nvar escapeRegexp = term => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, char => `\\\\${char}`);\nvar buildRegex = (queryProp, flags) => {\n  const query = queryProp.filter(Boolean).map(text => escapeRegexp(text));\n  return new RegExp(`(${query.join(\"|\")})`, flags);\n};\nvar getRegexFlags = (ignoreCase, matchAll = true) => `${ignoreCase ? \"i\" : \"\"}${matchAll ? \"g\" : \"\"}`;\nfunction highlightMultiple(props) {\n  const {\n    text,\n    query,\n    ignoreCase,\n    matchAll\n  } = props;\n  if (query.length === 0) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n  const flags = getRegexFlags(ignoreCase, matchAll);\n  const regex = buildRegex(Array.isArray(query) ? query : [query], flags);\n  const spans = [...text.matchAll(regex)].map(match => ({\n    start: match.index || 0,\n    end: (match.index || 0) + match[0].length\n  }));\n  return normalizeSpan(spans, props.text.length).map(chunk => ({\n    text: props.text.slice(chunk.start, chunk.end),\n    match: !!chunk.match\n  }));\n}\n\n// src/highlight.ts\nvar highlightWord = props => {\n  if (props.matchAll == null) {\n    props.matchAll = Array.isArray(props.query);\n  }\n  if (!props.matchAll && Array.isArray(props.query)) {\n    throw new Error(\"matchAll must be true when using multiple queries\");\n  }\n  return props.matchAll ? highlightMultiple(props) : highlightFirst(props);\n};\nexport { highlightWord };","map":{"version":3,"names":["normalizeSpan","spans","len","result","append","start","end","match","push","length","lastIndex","chunk","highlightFirst","props","text","query","ignoreCase","searchText","toLowerCase","searchQuery","indexOf","map","slice","escapeRegexp","term","replace","char","buildRegex","queryProp","flags","filter","Boolean","RegExp","join","getRegexFlags","matchAll","highlightMultiple","regex","Array","isArray","index","highlightWord","Error"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@zag-js/highlight-word/dist/index.mjs"],"sourcesContent":["// src/normalize-span.ts\nvar normalizeSpan = (spans, len) => {\n  const result = [];\n  const append = (start, end, match) => {\n    if (end - start > 0) result.push({ start, end, match });\n  };\n  if (spans.length === 0) {\n    append(0, len, false);\n  } else {\n    let lastIndex = 0;\n    for (const chunk of spans) {\n      append(lastIndex, chunk.start, false);\n      append(chunk.start, chunk.end, true);\n      lastIndex = chunk.end;\n    }\n    append(lastIndex, len, false);\n  }\n  return result;\n};\n\n// src/highlight-first.ts\nfunction highlightFirst(props) {\n  const { text, query, ignoreCase } = props;\n  const searchText = ignoreCase ? text.toLowerCase() : text;\n  const searchQuery = ignoreCase ? typeof query === \"string\" ? query.toLowerCase() : query : query;\n  const start = typeof searchText === \"string\" ? searchText.indexOf(searchQuery) : -1;\n  if (start === -1) {\n    return [{ text, match: false }];\n  }\n  const end = start + searchQuery.length;\n  const spans = [{ start, end }];\n  return normalizeSpan(spans, text.length).map((chunk) => ({\n    text: text.slice(chunk.start, chunk.end),\n    match: !!chunk.match\n  }));\n}\n\n// src/highlight-multiple.ts\nvar escapeRegexp = (term) => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char) => `\\\\${char}`);\nvar buildRegex = (queryProp, flags) => {\n  const query = queryProp.filter(Boolean).map((text) => escapeRegexp(text));\n  return new RegExp(`(${query.join(\"|\")})`, flags);\n};\nvar getRegexFlags = (ignoreCase, matchAll = true) => `${ignoreCase ? \"i\" : \"\"}${matchAll ? \"g\" : \"\"}`;\nfunction highlightMultiple(props) {\n  const { text, query, ignoreCase, matchAll } = props;\n  if (query.length === 0) {\n    return [{ text, match: false }];\n  }\n  const flags = getRegexFlags(ignoreCase, matchAll);\n  const regex = buildRegex(Array.isArray(query) ? query : [query], flags);\n  const spans = [...text.matchAll(regex)].map((match) => ({\n    start: match.index || 0,\n    end: (match.index || 0) + match[0].length\n  }));\n  return normalizeSpan(spans, props.text.length).map((chunk) => ({\n    text: props.text.slice(chunk.start, chunk.end),\n    match: !!chunk.match\n  }));\n}\n\n// src/highlight.ts\nvar highlightWord = (props) => {\n  if (props.matchAll == null) {\n    props.matchAll = Array.isArray(props.query);\n  }\n  if (!props.matchAll && Array.isArray(props.query)) {\n    throw new Error(\"matchAll must be true when using multiple queries\");\n  }\n  return props.matchAll ? highlightMultiple(props) : highlightFirst(props);\n};\n\nexport { highlightWord };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}