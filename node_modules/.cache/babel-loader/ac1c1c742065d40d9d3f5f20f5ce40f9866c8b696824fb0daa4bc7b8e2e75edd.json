{"ast":null,"code":"'use client';\n\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport * as select from '@zag-js/select';\nimport { useId, useEffect } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\nimport { useEvent } from '../../utils/use-event.js';\nimport { useFieldContext } from '../field/use-field-context.js';\nconst useSelect = props => {\n  const {\n    collection,\n    ...selectProps\n  } = props;\n  const locale = useLocaleContext();\n  const environment = useEnvironmentContext();\n  const field = useFieldContext();\n  const initialContext = {\n    id: useId(),\n    ids: {\n      label: field?.ids.label,\n      hiddenSelect: field?.ids.control\n    },\n    disabled: field?.disabled,\n    readOnly: field?.readOnly,\n    invalid: field?.invalid,\n    required: field?.required,\n    dir: locale.dir,\n    getRootNode: environment.getRootNode,\n    collection,\n    open: props.defaultOpen,\n    value: props.defaultValue,\n    \"open.controlled\": props.open !== void 0,\n    ...selectProps\n  };\n  const context = (() => {\n    const {\n      collection: _,\n      ...restProps\n    } = initialContext;\n    return {\n      ...restProps,\n      value: props.value,\n      onValueChange: useEvent(props.onValueChange, {\n        sync: true\n      }),\n      onHighlightChange: useEvent(props.onHighlightChange),\n      onOpenChange: useEvent(props.onOpenChange)\n    };\n  })();\n  const [state, send, service] = useMachine(select.machine(initialContext), {\n    context\n  });\n  useEffect(() => {\n    service.setContext({\n      collection\n    });\n  }, [collection]);\n  return select.connect(state, send, normalizeProps);\n};\nexport { useSelect };","map":{"version":3,"names":["useMachine","normalizeProps","select","useId","useEffect","useEnvironmentContext","useLocaleContext","useEvent","useFieldContext","useSelect","props","collection","selectProps","locale","environment","field","initialContext","id","ids","label","hiddenSelect","control","disabled","readOnly","invalid","required","dir","getRootNode","open","defaultOpen","value","defaultValue","context","_","restProps","onValueChange","sync","onHighlightChange","onOpenChange","state","send","service","machine","setContext","connect"],"sources":["/Users/macbook/developer/2025/2026/node_modules/@ark-ui/react/dist/components/select/use-select.js"],"sourcesContent":["'use client';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport * as select from '@zag-js/select';\nimport { useId, useEffect } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\nimport { useEvent } from '../../utils/use-event.js';\nimport { useFieldContext } from '../field/use-field-context.js';\n\nconst useSelect = (props) => {\n  const { collection, ...selectProps } = props;\n  const locale = useLocaleContext();\n  const environment = useEnvironmentContext();\n  const field = useFieldContext();\n  const initialContext = {\n    id: useId(),\n    ids: {\n      label: field?.ids.label,\n      hiddenSelect: field?.ids.control\n    },\n    disabled: field?.disabled,\n    readOnly: field?.readOnly,\n    invalid: field?.invalid,\n    required: field?.required,\n    dir: locale.dir,\n    getRootNode: environment.getRootNode,\n    collection,\n    open: props.defaultOpen,\n    value: props.defaultValue,\n    \"open.controlled\": props.open !== void 0,\n    ...selectProps\n  };\n  const context = (() => {\n    const { collection: _, ...restProps } = initialContext;\n    return {\n      ...restProps,\n      value: props.value,\n      onValueChange: useEvent(props.onValueChange, { sync: true }),\n      onHighlightChange: useEvent(props.onHighlightChange),\n      onOpenChange: useEvent(props.onOpenChange)\n    };\n  })();\n  const [state, send, service] = useMachine(select.machine(initialContext), {\n    context\n  });\n  useEffect(() => {\n    service.setContext({ collection });\n  }, [collection]);\n  return select.connect(state, send, normalizeProps);\n};\n\nexport { useSelect };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,UAAU,EAAEC,cAAc,QAAQ,eAAe;AAC1D,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,SAASC,KAAK,EAAEC,SAAS,QAAQ,OAAO;AACxC,SAASC,qBAAqB,QAAQ,wDAAwD;AAC9F,SAASC,gBAAgB,QAAQ,8CAA8C;AAC/E,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,eAAe,QAAQ,+BAA+B;AAE/D,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAC3B,MAAM;IAAEC,UAAU;IAAE,GAAGC;EAAY,CAAC,GAAGF,KAAK;EAC5C,MAAMG,MAAM,GAAGP,gBAAgB,CAAC,CAAC;EACjC,MAAMQ,WAAW,GAAGT,qBAAqB,CAAC,CAAC;EAC3C,MAAMU,KAAK,GAAGP,eAAe,CAAC,CAAC;EAC/B,MAAMQ,cAAc,GAAG;IACrBC,EAAE,EAAEd,KAAK,CAAC,CAAC;IACXe,GAAG,EAAE;MACHC,KAAK,EAAEJ,KAAK,EAAEG,GAAG,CAACC,KAAK;MACvBC,YAAY,EAAEL,KAAK,EAAEG,GAAG,CAACG;IAC3B,CAAC;IACDC,QAAQ,EAAEP,KAAK,EAAEO,QAAQ;IACzBC,QAAQ,EAAER,KAAK,EAAEQ,QAAQ;IACzBC,OAAO,EAAET,KAAK,EAAES,OAAO;IACvBC,QAAQ,EAAEV,KAAK,EAAEU,QAAQ;IACzBC,GAAG,EAAEb,MAAM,CAACa,GAAG;IACfC,WAAW,EAAEb,WAAW,CAACa,WAAW;IACpChB,UAAU;IACViB,IAAI,EAAElB,KAAK,CAACmB,WAAW;IACvBC,KAAK,EAAEpB,KAAK,CAACqB,YAAY;IACzB,iBAAiB,EAAErB,KAAK,CAACkB,IAAI,KAAK,KAAK,CAAC;IACxC,GAAGhB;EACL,CAAC;EACD,MAAMoB,OAAO,GAAG,CAAC,MAAM;IACrB,MAAM;MAAErB,UAAU,EAAEsB,CAAC;MAAE,GAAGC;IAAU,CAAC,GAAGlB,cAAc;IACtD,OAAO;MACL,GAAGkB,SAAS;MACZJ,KAAK,EAAEpB,KAAK,CAACoB,KAAK;MAClBK,aAAa,EAAE5B,QAAQ,CAACG,KAAK,CAACyB,aAAa,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;MAC5DC,iBAAiB,EAAE9B,QAAQ,CAACG,KAAK,CAAC2B,iBAAiB,CAAC;MACpDC,YAAY,EAAE/B,QAAQ,CAACG,KAAK,CAAC4B,YAAY;IAC3C,CAAC;EACH,CAAC,EAAE,CAAC;EACJ,MAAM,CAACC,KAAK,EAAEC,IAAI,EAAEC,OAAO,CAAC,GAAGzC,UAAU,CAACE,MAAM,CAACwC,OAAO,CAAC1B,cAAc,CAAC,EAAE;IACxEgB;EACF,CAAC,CAAC;EACF5B,SAAS,CAAC,MAAM;IACdqC,OAAO,CAACE,UAAU,CAAC;MAAEhC;IAAW,CAAC,CAAC;EACpC,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAChB,OAAOT,MAAM,CAAC0C,OAAO,CAACL,KAAK,EAAEC,IAAI,EAAEvC,cAAc,CAAC;AACpD,CAAC;AAED,SAASQ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}